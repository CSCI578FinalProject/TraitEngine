5
-----CSCI578-----
-----CSCI578-----


    /**
     * Try to get user locale from the session, if possible.
     * IMPLEMENTATION NOTE: this method has explicit support for Tapestry 3 and Struts 1.x
     * @param in_session
     * @return String
     */
    public static String guessDisplayLocaleFromSession(Session in_session) {
        return localeToString(SessionUtils.guessLocaleFromSession(in_session));
    }
-----CSCI578-----

    private static String localeToString(Locale locale) {
        if (locale != null) {
            return escapeXml(locale.toString());//locale.getDisplayName();
        } else {
            return "";
        }
    }
-----CSCI578-----


    /**
     * Try to get user locale from the session, if possible.
     * IMPLEMENTATION NOTE: this method has explicit support for Tapestry 3, Struts 1.x and Spring
     * JSF check the browser meta tag "accept languages" to choose what langage to display.
     * @param in_session
     * @return String
     */
    public static Locale guessLocaleFromSession(final Session in_session) {
    	return guessLocaleFromSession(in_session.getSession());
    }

    public static Locale guessLocaleFromSession(final HttpSession in_session) {
    	if (null == in_session) {
			return null;
		}
        try {
            Locale locale = null;
            
	        // First search "known locations"
	        for (int i = 0; i < LOCALE_TEST_ATTRIBUTES.length; ++i) {
	            Object obj = in_session.getAttribute(LOCALE_TEST_ATTRIBUTES[i]);
	            if (null != obj && obj instanceof Locale) {
	                locale = (Locale) obj;
	                break;
	            }
	            obj = in_session.getAttribute(LOCALE_TEST_ATTRIBUTES[i].toLowerCase());
	            if (null != obj && obj instanceof Locale) {
	                locale = (Locale) obj;
	                break;
	            }
	            obj = in_session.getAttribute(LOCALE_TEST_ATTRIBUTES[i].toUpperCase());
	            if (null != obj && obj instanceof Locale) {
	                locale = (Locale) obj;
	                break;
	            }
	        }
	
	        if (null != locale) {
	            return locale;
	        }
	
	        // Tapestry 3.0: Engine stored in session under "org.apache.tapestry.engine:" + config.getServletName()
	        // TODO: Tapestry 4+
	        {
	            final List tapestryArray = new ArrayList();
	            for (Enumeration enumeration = in_session.getAttributeNames(); enumeration.hasMoreElements();) {
	                String name = (String) enumeration.nextElement();
	                if (name.indexOf("tapestry") > -1 && name.indexOf("engine") > -1 && null != in_session.getAttribute(name)) {//$NON-NLS-1$ //$NON-NLS-2$
	                    tapestryArray.add(in_session.getAttribute(name));
	                }
	            }
	            if (tapestryArray.size() == 1) {
	                // found a potential Engine! Let's call getLocale() on it.
	                Object probableEngine = tapestryArray.get(0);
	                if (null != probableEngine) {
	                    try {
	                        Method readMethod = probableEngine.getClass().getMethod("getLocale", (Class[])null);//$NON-NLS-1$
	                        if (null != readMethod) {
	                            // Call the property getter and return the value
	                            Object possibleLocale = readMethod.invoke(probableEngine, (Object[])null);
	                            if (null != possibleLocale && possibleLocale instanceof Locale) {
	                                locale = (Locale) possibleLocale;
	                            }
	                        }
	                    } catch (Exception e) {
	                        // stay silent
	                    }
	                }
	            }
	        }
	        
	        if (null != locale) {
	            return locale;
	        }
	
	        // Last guess: iterate over all attributes, to find a Locale
	        // If there is only one, consider it to be /the/ locale
	        {
	            final List localeArray = new ArrayList();
	            for (Enumeration enumeration = in_session.getAttributeNames(); enumeration.hasMoreElements();) {
	                String name = (String) enumeration.nextElement();
	                Object obj = in_session.getAttribute(name);
	                if (null != obj && obj instanceof Locale) {
	                    localeArray.add(obj);
	                }
	            }
	            if (localeArray.size() == 1) {
	                locale = (Locale) localeArray.get(0);
	            }
	        }

	        return locale;
        } catch (IllegalStateException ise) {
        	//ignore: invalidated session
        	return null;
        }
    }
-----CSCI578-----
