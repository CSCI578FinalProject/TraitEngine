12
-----CSCI578-----



    /**
     * Set the port number of the server to process this request.
     *
     * @param port The server port
     */
    public void setServerPort(int port) {
        coyoteRequest.setServerPort(port);
    }
-----CSCI578-----



    /**
     * Set the fully qualified name of the remote client associated with this
     * Request.
     *
     * @param remoteHost The remote host name
     */
    public void setRemoteHost(String remoteHost) {
        this.remoteHost = remoteHost;
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----



    /**
     * Set the IP address of the remote client associated with this Request.
     *
     * @param remoteAddr The remote IP address
     */
    public void setRemoteAddr(String remoteAddr) {
        this.remoteAddr = remoteAddr;
    }
-----CSCI578-----

    
    /**
     * Return <code>true</code> if the given <code>str</code> matches at least one of the given <code>patterns</code>.
     */
    protected static boolean matchesOne(String str, Pattern... patterns) {
        for (Pattern pattern : patterns) {
            if (pattern.matcher(str).matches()) {
                return true;
            }
        }
        return false;
    }
-----CSCI578-----


    /**
     * Get the Coyote request.
     */
    public org.apache.coyote.Request getCoyoteRequest() {
        return (this.coyoteRequest);
    }
-----CSCI578-----



    /**
     * Set the value to be returned by <code>isSecure()</code>
     * for this Request.
     *
     * @param secure The new isSecure value
     */
    public void setSecure(boolean secure) {
        this.secure = secure;
    }
-----CSCI578-----

    
    /**
     * Convert a given comma delimited list of regular expressions into an array of String
     * 
     * @return array of patterns (non <code>null</code>)
     */
    protected static String[] commaDelimitedListToStringArray(String commaDelimitedStrings) {
        return (commaDelimitedStrings == null || commaDelimitedStrings.length() == 0) ? new String[0] : commaSeparatedValuesPattern
            .split(commaDelimitedStrings);
    }
-----CSCI578-----

    
    /**
     * Convert an array of strings in a comma delimited string
     */
    protected static String listToCommaDelimitedString(List<String> stringList) {
        if (stringList == null) {
            return "";
        }
        StringBuilder result = new StringBuilder();
        for (Iterator<String> it = stringList.iterator(); it.hasNext();) {
            Object element = it.next();
            if (element != null) {
                result.append(element);
                if (it.hasNext()) {
                    result.append(", ");
                }
            }
        }
        return result.toString();
    }
-----CSCI578-----

    
    /**
     * @see #setInternalProxies(String)
     * @return comma delimited list of internal proxies
     */
    public String getInternalProxies() {
        List<String> internalProxiesAsStringList = new ArrayList<String>();
        for (Pattern internalProxyPattern : internalProxies) {
            internalProxiesAsStringList.add(String.valueOf(internalProxyPattern));
        }
        return listToCommaDelimitedString(internalProxiesAsStringList);
    }
-----CSCI578-----


    /**
     * @see #setTrustedProxies(String)
     * @return comma delimited list of trusted proxies
     */
    public String getTrustedProxies() {
        List<String> trustedProxiesAsStringList = new ArrayList<String>();
        for (Pattern trustedProxy : trustedProxies) {
            trustedProxiesAsStringList.add(String.valueOf(trustedProxy));
        }
        return listToCommaDelimitedString(trustedProxiesAsStringList);
    }
