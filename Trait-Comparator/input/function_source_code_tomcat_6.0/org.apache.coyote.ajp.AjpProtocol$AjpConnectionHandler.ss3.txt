20
-----CSCI578-----
-----CSCI578-----

    public String getClientCertProvider() { return clientCertProvider; }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----

    public void setTomcatAuthentication(boolean tomcatAuthentication) { this.tomcatAuthentication = tomcatAuthentication; }
-----CSCI578-----

    public void setKeepAliveTimeout(int timeout) { keepAliveTimeout = timeout; }
-----CSCI578-----

    public void setMaxCookieCount(int maxCookieCount) { this.maxCookieCount = maxCookieCount; }
-----CSCI578-----

    public void setRequiredSecret(String requiredSecret) { this.requiredSecret = requiredSecret; }
-----CSCI578-----

    public void setClientCertProvider(String s) { this.clientCertProvider = s; }
-----CSCI578-----
-----CSCI578-----



    // ------------------------------------------------------ Connector Methods


    /**
     * Set the associated adapter.
     *
     * @param adapter the new adapter
     */
    public void setAdapter(Adapter adapter) {
        this.adapter = adapter;
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----
 

    
    // --------------------------------------------------------- Public Methods


    /**
     * Prepare this packet for accumulating a message from the container to
     * the web server.  Set the write position to just after the header
     * (but leave the length unwritten, because it is as yet unknown).
     */
    public void reset() {
        len = 4;
        pos = 4;
    }
-----CSCI578-----



    /**
     * For a packet to be sent to the web server, finish the process of
     * accumulating data and write the length of the data payload into
     * the header.  
     */
    public void end() {
        len = pos;
        int dLen = len - 4;

        buf[0] = (byte) 0x41;
        buf[1] = (byte) 0x42;
        buf[2] = (byte) ((dLen>>>8) & 0xFF);
        buf[3] = (byte) (dLen & 0xFF);
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----
