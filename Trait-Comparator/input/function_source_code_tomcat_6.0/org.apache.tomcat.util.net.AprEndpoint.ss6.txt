11
-----CSCI578-----



    /**
     * Stop the endpoint. This will cause all processing threads to stop.
     */
    public void stop() {
        if (!paused) {
            pause();
        }
        if (running) {
            running = false;
            unlockAccept();
            for (int i = 0; i < acceptors.length; i++) {
                long s = System.currentTimeMillis() + 10000;
                while (acceptors[i].isAlive() && serverSock != 0) {
                    try {
                        acceptors[i].interrupt();
                        acceptors[i].join(1000);
                    } catch (InterruptedException e) {
                        // Ignore
                    }
                    if (System.currentTimeMillis() >= s) {
                        log.warn(sm.getString("endpoint.warn.unlockAcceptorFailed",
                                 acceptors[i].getName()));
                        // If the Acceptor is still running force
                        // the hard socket close.
                        if (serverSock != 0) {
                            Socket.shutdown(serverSock, Socket.APR_SHUTDOWN_READ);
                            serverSock = 0;
                        }
                    }
                }
            }
            for (int i = 0; i < pollers.length; i++) {
                try {
                    pollers[i].destroy();
                } catch (Exception e) {
                    // Ignore
                }
            }
            pollers = null;
            for (int i = 0; i < cometPollers.length; i++) {
                try {
                    cometPollers[i].destroy();
                } catch (Exception e) {
                    // Ignore
                }
            }
            cometPollers = null;
            if (useSendfile) {
                for (int i = 0; i < sendfiles.length; i++) {
                    try {
                        sendfiles[i].destroy();
                    } catch (Exception e) {
                        // Ignore
                    }
                }
                sendfiles = null;
            }
        }
    }
-----CSCI578-----



    /**
     * Deallocate APR memory pools, and close server socket.
     */
    public void destroy() throws Exception {
        if (running) {
            stop();
        }
        // Destroy pool if it was initialised
        if (serverSockPool != 0) {
            Pool.destroy(serverSockPool);
            serverSockPool = 0;
        }

        // Close server socket if it was initialised
        if (serverSock != 0) {
            Socket.close(serverSock);
            serverSock = 0;
        }

        sslContext = 0;

        // Close all APR memory pools and resources if initialised
        if (rootPool != 0) {
            Pool.destroy(rootPool);
            rootPool = 0;
        }

        initialized = false;
    }
-----CSCI578-----
-----CSCI578-----


    /**
     * Close a socket.
     * @param thesocket The socket to close
     */
    public static native int close(long thesocket);
-----CSCI578-----
-----CSCI578-----



    /**
     * Shutdown either reading, writing, or both sides of a socket.
     * <br>
     * This does not actually close the socket descriptor, it just
     *      controls which calls are still valid on the socket.
     * @param thesocket The socket to close
     * @param how How to shutdown the socket.  One of:
     * <PRE>
     * APR_SHUTDOWN_READ         no longer allow read requests
     * APR_SHUTDOWN_WRITE        no longer allow write requests
     * APR_SHUTDOWN_READWRITE    no longer allow read or write requests
     * </PRE>
     */
    public static native int shutdown(long thesocket, int how);
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----



    /**
     * Pause the endpoint, which will make it stop accepting new sockets.
     */
    public void pause() {
        if (running && !paused) {
            paused = true;
            unlockAccept();
        }
    }
-----CSCI578-----


    /**
     * Destroy the pool. This takes similar action as apr_pool_clear() and then
     * frees all the memory.
     * This will actually free the memory
     * @param pool The pool to destroy
     */
    public static native void destroy(long pool);
-----CSCI578-----



    /**
     * Unlock the server socket accept using a bugus connection.
     */
    protected void unlockAccept() {
        java.net.Socket s = null;
        InetSocketAddress saddr = null;
        try {
            // Need to create a connection to unlock the accept();
            if (address == null) {
                saddr = new InetSocketAddress("localhost", getLocalPort());
            } else {
                saddr = new InetSocketAddress(address, getLocalPort());
            }
            s = new java.net.Socket();
            s.setSoTimeout(soTimeout > 0 ? soTimeout : 60000);
            s.setSoLinger(true ,0);
            if (log.isDebugEnabled()) {
                log.debug("About to unlock socket for: " + saddr);
            }
            s.connect(saddr, unlockTimeout);
            /*
             * In the case of a deferred accept / accept filters we need to
             * send data to wake up the accept. Send OPTIONS * to bypass even
             * BSD accept filters. The Acceptor will discard it.
             */
            if (deferAccept) {
                OutputStreamWriter sw;

                sw = new OutputStreamWriter(s.getOutputStream(), "ISO-8859-1");
                sw.write("OPTIONS * HTTP/1.0\r\n"
                        + "User-Agent: Tomcat wakeup connection\r\n\r\n");
                sw.flush();
            }
        } catch(Exception e) {
            if (log.isDebugEnabled()) {
                log.debug(sm.getString("endpoint.debug.unlock", "" + getLocalPort()), e);
            }
        } finally {
            if (s != null) {
                try {
                    s.close();
                } catch (Exception e) {
                    // Ignore
                }
            }
        }
    }
