7
-----CSCI578-----


    public boolean getSoLingerOn() {
        return soLingerOn;
    }
-----CSCI578-----



    /**
     * Unlock the server socket accept using a bogus connection.
     */
    protected void unlockAccept() {
        java.net.Socket s = null;
        InetSocketAddress saddr = null;
        try {
            // Need to create a connection to unlock the accept();
            if (address == null) {
                 saddr = new InetSocketAddress("localhost", getLocalPort());
            } else {
                 saddr = new InetSocketAddress(address, getLocalPort());
            }
            s = new java.net.Socket();
            s.setSoTimeout(getSocketProperties().getSoTimeout());
            s.setSoLinger(getSocketProperties().getSoLingerOn(),getSocketProperties().getSoLingerTime());
            if (log.isDebugEnabled()) {
                log.debug("About to unlock socket for:"+saddr);
            }
            s.connect(saddr,getSocketProperties().getUnlockTimeout());
            if (log.isDebugEnabled()) {
                log.debug("Socket unlock completed for:"+saddr);
            }
        } catch(Exception e) {
            if (log.isDebugEnabled()) {
                log.debug(sm.getString("endpoint.debug.unlock",
                        Integer.toString(getLocalPort())), e);
            }
        } finally {
            if (s != null) {
                try {
                    s.close();
                } catch (Exception e) {
                    // Ignore
                }
            }
        }
    }
-----CSCI578-----


    public int getUnlockTimeout() {
        return unlockTimeout;
    }
-----CSCI578-----


    public SocketProperties getSocketProperties() {
        return socketProperties;
    }
-----CSCI578-----


    public int getSoTimeout() {
        return soTimeout;
    }
-----CSCI578-----


    public int getSoLingerTime() {
        return soLingerTime;
    }
-----CSCI578-----



    /**
     * Port in use.
     */
    @Override
    public int getLocalPort() {
        ServerSocketChannel ssc = serverSock;
        if (ssc == null) {
            return -1;
        } else {
            ServerSocket s = ssc.socket();
            if (s == null) {
                return -1;
            } else {
                return s.getLocalPort();
            }
        }
    }
