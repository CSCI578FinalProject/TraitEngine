14
-----CSCI578-----


    /**
     * Return the secure random number generator provider name.
     *
     * @return The name of the SecureRandom provider
     */
    public String getSecureRandomProvider() {
        return secureRandomProvider;
    }
-----CSCI578-----
-----CSCI578-----


    /**
     * Return the secure random number generator class name.
     *
     * @return The fully qualified name of the SecureRandom implementation to
     *         use
     */
    public String getSecureRandomClass() {
        return this.secureRandomClass;
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----



    public void setOpaque(String opaque) {
        this.opaque = opaque;
    }
-----CSCI578-----


    /**
     * Return the secure random number generator algorithm name.
     *
     * @return The name of the SecureRandom algorithm used
     */
    public String getSecureRandomAlgorithm() {
        return secureRandomAlgorithm;
    }
-----CSCI578-----



    public void setKey(String key) {
        this.key = key;
    }
-----CSCI578-----



    /**
     * Generate and return a new session identifier.
     */
    @Override
    public String generateSessionId() {
        return generateSessionId(jvmRoute);
    }
-----CSCI578-----



    public String getOpaque() {
        return opaque;
    }
-----CSCI578-----



    public String getKey() {
        return key;
    }
-----CSCI578-----



    @Override
    protected void startInternal() throws LifecycleException {
        // Ensure SecureRandom has been initialised
        generateSessionId();

        setState(LifecycleState.STARTING);
    }
-----CSCI578-----
-----CSCI578-----



    @Override
    protected void stopInternal() throws LifecycleException {
        setState(LifecycleState.STOPPING);
        randoms.clear();
    }
