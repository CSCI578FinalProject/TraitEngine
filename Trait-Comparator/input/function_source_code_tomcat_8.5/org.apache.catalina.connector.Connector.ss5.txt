8
-----CSCI578-----


    /**
     * When the buffer is full, write the data to the output channel.
     * Also used when large amount of data is appended.
     * If not set, the buffer will grow to the limit.
     * @param out The output channel
     */
    public void setByteOutputChannel(ByteOutputChannel out) {
        this.out=out;
    }
-----CSCI578-----



    // ------------------------------------------------------------- Properties

    /**
     * Set the Connector through which this Request was received.
     *
     * @param connector The new connector
     */
    public void setConnector(Connector connector) {
        if("AJP/1.3".equals(connector.getProtocol())) {
            // default size to size of one ajp-packet
            outputBuffer = new OutputBuffer(8184);
        } else {
            outputBuffer = new OutputBuffer();
        }
        outputStream = new CoyoteOutputStream(outputBuffer);
        writer = new CoyoteWriter(outputBuffer);
    }
-----CSCI578-----



    /**
     * Create (or allocate) and return a Response object suitable for
     * receiving the contents of a Response from the responsible Container.
     *
     * @return a new Servlet response object
     */
    public Response createResponse() {

        Response response = new Response();
        response.setConnector(this);
        return (response);

    }
-----CSCI578-----
-----CSCI578-----



    public void setOptimizedWrite(boolean optimizedWrite) {
        this.optimizedWrite = optimizedWrite;
    }
-----CSCI578-----


    /**
     * When the buffer is full, write the data to the output channel.
     * Also used when large amount of data is appended.
     * If not set, the buffer will grow to the limit.
     * @param out The output channel
     */
    public void setCharOutputChannel(CharOutputChannel out) {
        this.out=out;
    }
-----CSCI578-----
-----CSCI578-----
