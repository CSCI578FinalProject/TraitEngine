9
-----CSCI578-----


    /**
     * Must Implement at subclass for custom store children handling.
     *
     * @param aWriter Current output writer
     * @param indent Indentation level
     * @param aElement Current element
     * @param elementDesc The element description
     * @throws Exception Configuration storing error
     */
    public void storeChildren(PrintWriter aWriter, int indent, Object aElement,
            StoreDescription elementDesc) throws Exception {
    }
-----CSCI578-----
-----CSCI578-----


    /**
     * @return Returns the storeAppender.
     */
    @Override
    public StoreAppender getStoreAppender() {
        return storeAppender;
    }
-----CSCI578-----


    /**
     * @return Returns the children.
     */
    public boolean isChildren() {
        return children;
    }
-----CSCI578-----


    /**
     * Print some spaces.
     *
     * @param aWriter The output writer
     * @param indent The number of spaces
     */
    public void printIndent(PrintWriter aWriter, int indent) {
        for (int i = 0; i < indent; i++) {
            aWriter.print(' ');
        }
        pos = indent;
    }
-----CSCI578-----


    /**
     * Print only the open tag with all attributes.
     *
     * @param aWriter The output writer
     * @param indent Indentation level
     * @param bean The current bean that is stored
     * @param aDesc Store description of the current element
     * @throws Exception A store error occurred
     */
    public void printOpenTag(PrintWriter aWriter, int indent, Object bean,
            StoreDescription aDesc) throws Exception {
        aWriter.print("<");
        aWriter.print(aDesc.getTag());
        if (aDesc.isAttributes() && bean != null)
            printAttributes(aWriter, indent, bean, aDesc);
        aWriter.println(">");
    }
-----CSCI578-----


    /**
     * Print the closing tag.
     *
     * @param aWriter The output writer
     * @param aDesc Store description of the current element
     * @throws Exception A store error occurred
     */
    public void printCloseTag(PrintWriter aWriter, StoreDescription aDesc)
            throws Exception {
        aWriter.print("</");
        aWriter.print(aDesc.getTag());
        aWriter.println(">");
    }
-----CSCI578-----


    /**
     * Print tag with all attributes
     *
     * @param aWriter The output writer
     * @param indent Indentation level
     * @param bean The current bean that is stored
     * @param aDesc Store description of the current element
     * @throws Exception A store error occurred
     */
    public void printTag(PrintWriter aWriter, int indent, Object bean,
            StoreDescription aDesc) throws Exception {
        aWriter.print("<");
        aWriter.print(aDesc.getTag());
        if (aDesc.isAttributes() && bean != null)
            printAttributes(aWriter, indent, bean, aDesc);
        aWriter.println("/>");
    }
-----CSCI578-----


    /**
     * Print an array of values.
     *
     * @param aWriter The output writer
     * @param tag The element name
     * @param indent Indentation level
     * @param elements Array of element values
     */
    public void printTagValueArray(PrintWriter aWriter, String tag, int indent,
            String[] elements) {
        if (elements != null && elements.length > 0) {
            printIndent(aWriter, indent + 2);
            aWriter.print("<");
            aWriter.print(tag);
            aWriter.print(">");
            for (int i = 0; i < elements.length; i++) {
                printIndent(aWriter, indent + 4);
                aWriter.print(elements[i]);
                if (i + 1 < elements.length)
                    aWriter.println(",");
            }
            printIndent(aWriter, indent + 2);
            aWriter.print("</");
            aWriter.print(tag);
            aWriter.println(">");
        }
    }
