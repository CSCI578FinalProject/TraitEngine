8
-----CSCI578-----


    /**
     * Runs a refresh cycle and returns a list of members that has expired.
     * This also removes the members from the membership, in such a way that
     * getMembers() = getMembers() - expire()
     * @param maxtime - the max time a member can remain unannounced before it is considered dead.
     * @return the list of expired members
     */
    public Member[] expire(long maxtime) {
        synchronized (membersLock) {
            if (!hasMembers()) {
               return EMPTY_MEMBERS;
            }

            ArrayList<Member> list = null;
            Iterator<MbrEntry> i = map.values().iterator();
            while (i.hasNext()) {
                MbrEntry entry = i.next();
                if (entry.hasExpired(maxtime)) {
                    if (list == null) {
                        // Only need a list when members are expired (smaller gc)
                        list = new java.util.ArrayList<>();
                    }
                    list.add(entry.getMember());
                }
            }

            if (list != null) {
                Member[] result = new Member[list.size()];
                list.toArray(result);
                for (int j=0; j<result.length; j++) {
                    removeMember(result[j]);
                }
                return result;
            } else {
                return EMPTY_MEMBERS ;
            }
        }
    }
-----CSCI578-----
-----CSCI578-----


    /**
     * Returning that service has members or not.
     *
     * @return <code>true</code> if there are one or more members, otherwise
     *         <code>false</code>
     */
    public boolean hasMembers() {
        return members.length > 0;
    }
-----CSCI578-----


    @Override
    public boolean hasMembers() {
        if ( membership == null ) setupMembership();
        return membership.hasMembers();
    }
-----CSCI578-----


    public Member[] getView() {
        return (view != null && view.hasMembers()) ? view.getMembers() : new Member[0];
    }
-----CSCI578-----


    /**
     * has members
     */
    @Override
    public boolean hasMembers() {

        return membership.hasMembers();
    }
-----CSCI578-----


    @Override
    public boolean hasMembers() {
        if ( membership == null ) setupMembership();
        return membership.hasMembers();
    }
-----CSCI578-----


    /**
     * has members?
     */
    @Override
    public boolean hasMembers() {
       if ( impl == null || impl.membership == null ) return false;
       return impl.membership.hasMembers();
    }
