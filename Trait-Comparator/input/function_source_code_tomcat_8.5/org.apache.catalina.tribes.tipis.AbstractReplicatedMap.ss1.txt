7
-----CSCI578-----


    @Override
    public boolean isEmpty() {
        return size()==0;
    }
-----CSCI578-----



    @Override
    public int size() {
        //todo, implement a counter variable instead
        //only count active members in this node
        int counter = 0;
        Iterator<Map.Entry<K,MapEntry<K,V>>> it = innerMap.entrySet().iterator();
        while (it!=null && it.hasNext() ) {
            Map.Entry<?,?> e = it.next();
            if ( e != null ) {
                MapEntry<K,V> entry = innerMap.get(e.getKey());
                if (entry!=null && entry.isActive() && entry.getValue() != null) counter++;
            }
        }
        return counter;
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----


    @Override
    public boolean containsValue(Object value) {
        if (value == null) {
            throw new NullPointerException();
        }
        Iterator<Map.Entry<K,MapEntry<K,V>>> i = innerMap.entrySet().iterator();
        while (i.hasNext()) {
            Map.Entry<K,MapEntry<K,V>> e = i.next();
            MapEntry<K,V> entry = innerMap.get(e.getKey());
            if (entry!=null && entry.isActive() && value.equals(entry.getValue())) return true;
        }
        return false;
    }
-----CSCI578-----


    @Override
    public Set<Map.Entry<K,V>> entrySet() {
        LinkedHashSet<Map.Entry<K,V>> set = new LinkedHashSet<>(innerMap.size());
        Iterator<Map.Entry<K,MapEntry<K,V>>> i = innerMap.entrySet().iterator();
        while ( i.hasNext() ) {
            Map.Entry<?,?> e = i.next();
            Object key = e.getKey();
            MapEntry<K,V> entry = innerMap.get(key);
            if ( entry != null && entry.isActive() ) {
                set.add(entry);
            }
        }
        return Collections.unmodifiableSet(set);
    }
-----CSCI578-----


    @Override
    public Collection<V> values() {
        ArrayList<V> values = new ArrayList<>();
        Iterator<Map.Entry<K,MapEntry<K,V>>> i = innerMap.entrySet().iterator();
        while ( i.hasNext() ) {
            Map.Entry<K,MapEntry<K,V>> e = i.next();
            MapEntry<K,V> entry = innerMap.get(e.getKey());
            if (entry!=null && entry.isActive() && entry.getValue()!=null) values.add(entry.getValue());
        }
        return Collections.unmodifiableCollection(values);
    }
