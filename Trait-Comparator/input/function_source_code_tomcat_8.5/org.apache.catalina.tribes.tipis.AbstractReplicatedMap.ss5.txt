2
-----CSCI578-----


    @Override
    public Set<K> keySet() {
        //todo implement
        //should only return keys where this is active.
        LinkedHashSet<K> set = new LinkedHashSet<>(innerMap.size());
        Iterator<Map.Entry<K,MapEntry<K,V>>> i = innerMap.entrySet().iterator();
        while ( i.hasNext() ) {
            Map.Entry<K,MapEntry<K,V>> e = i.next();
            K key = e.getKey();
            MapEntry<K,V> entry = innerMap.get(key);
            if ( entry!=null && entry.isActive() ) set.add(key);
        }
        return Collections.unmodifiableSet(set);

    }
-----CSCI578-----


    @Override
    public void clear() {
        clear(true);
    }


    public void clear(boolean notify) {
        if ( notify ) {
            //only delete active keys
            Iterator<K> keys = keySet().iterator();
            while (keys.hasNext())
                remove(keys.next());
        } else {
            innerMap.clear();
        }
    }
