12
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----


    private ByteBuffer getReadBuffer() {
        return getBuffer(getRxBufSize());
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----


    public void reset() {
        if ( isConnected() && readbuf == null) {
            readbuf = getReadBuffer();
        }
        if ( readbuf != null ) readbuf.clear();
        if ( writebuf != null ) writebuf.clear();
        current = null;
        ackbuf.clear();
        remaining = 0;
        complete = false;
        setAttempt(0);
        setUdpBased(false);
    }
-----CSCI578-----
-----CSCI578-----


    @Override
    public void sendMessage(Member[] destination, ChannelMessage message) throws ChannelException {
        if (!isConnected()) {
            throw new ChannelException(sm.getString("pooledParallelSender.sender.disconnected"));
        }
        ParallelNioSender sender = (ParallelNioSender)getSender();
        if (sender == null) {
            ChannelException cx = new ChannelException(sm.getString(
                    "pooledParallelSender.unable.retrieveSender.timeout",
                    Long.toString(getMaxWait())));
            for (int i = 0; i < destination.length; i++)
                cx.addFaultyMember(destination[i], new NullPointerException(sm.getString("pooledParallelSender.unable.retrieveSender")));
            throw cx;
        } else {
            try {
                sender.sendMessage(destination, message);
                sender.keepalive();
            } catch (ChannelException x) {
                sender.disconnect();
                throw x;
            } finally {
                returnSender(sender);
            }
        }
    }
-----CSCI578-----
