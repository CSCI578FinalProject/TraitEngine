26
-----CSCI578-----

    public void setCookieValue(String cookieValue) {
        this.cookieValue = cookieValue;
    }
-----CSCI578-----

    public void setCookie(boolean cookie) {
        this.cookie = cookie;
    }
-----CSCI578-----


    public void setCookieSecure(boolean cookieSecure) {
        this.cookieSecure = cookieSecure;
    }
-----CSCI578-----

    public void setLast(boolean last) {
        this.last = last;
    }
-----CSCI578-----

    public void setNoescape(boolean noescape) {
        this.noescape = noescape;
    }
-----CSCI578-----


    public void setHost(boolean host) {
        this.host = host;
    }
-----CSCI578-----



    /**
     * Parser for ReweriteRule flags.
     * @param line The configuration line being parsed
     * @param rule The current rule
     * @param flag The flag
     */
    protected static void parseRuleFlag(String line, RewriteRule rule, String flag) {
        if (flag.equals("chain") || flag.equals("C")) {
            rule.setChain(true);
        } else if (flag.startsWith("cookie=") || flag.startsWith("CO=")) {
            rule.setCookie(true);
            if (flag.startsWith("cookie")) {
                flag = flag.substring("cookie=".length());
            } else if (flag.startsWith("CO=")) {
                flag = flag.substring("CO=".length());
            }
            StringTokenizer tokenizer = new StringTokenizer(flag, ":");
            if (tokenizer.countTokens() < 2) {
                throw new IllegalArgumentException("Invalid flag in: " + line);
            }
            rule.setCookieName(tokenizer.nextToken());
            rule.setCookieValue(tokenizer.nextToken());
            if (tokenizer.hasMoreTokens()) {
                rule.setCookieDomain(tokenizer.nextToken());
            }
            if (tokenizer.hasMoreTokens()) {
                try {
                    rule.setCookieLifetime(Integer.parseInt(tokenizer.nextToken()));
                } catch (NumberFormatException e) {
                    throw new IllegalArgumentException("Invalid flag in: " + line, e);
                }
            }
            if (tokenizer.hasMoreTokens()) {
                rule.setCookiePath(tokenizer.nextToken());
            }
            if (tokenizer.hasMoreTokens()) {
                rule.setCookieSecure(Boolean.parseBoolean(tokenizer.nextToken()));
            }
            if (tokenizer.hasMoreTokens()) {
                rule.setCookieHttpOnly(Boolean.parseBoolean(tokenizer.nextToken()));
            }
        } else if (flag.startsWith("env=") || flag.startsWith("E=")) {
            rule.setEnv(true);
            if (flag.startsWith("env=")) {
                flag = flag.substring("env=".length());
            } else if (flag.startsWith("E=")) {
                flag = flag.substring("E=".length());
            }
            int pos = flag.indexOf(':');
            if (pos == -1 || (pos + 1) == flag.length()) {
                throw new IllegalArgumentException("Invalid flag in: " + line);
            }
            rule.addEnvName(flag.substring(0, pos));
            rule.addEnvValue(flag.substring(pos + 1));
        } else if (flag.startsWith("forbidden") || flag.startsWith("F")) {
            rule.setForbidden(true);
        } else if (flag.startsWith("gone") || flag.startsWith("G")) {
            rule.setGone(true);
        } else if (flag.startsWith("host") || flag.startsWith("H")) {
            rule.setHost(true);
        } else if (flag.startsWith("last") || flag.startsWith("L")) {
            rule.setLast(true);
        } else if (flag.startsWith("nocase") || flag.startsWith("NC")) {
            rule.setNocase(true);
        } else if (flag.startsWith("noescape") || flag.startsWith("NE")) {
            rule.setNoescape(true);
        } else if (flag.startsWith("next") || flag.startsWith("N")) {
            rule.setNext(true);
        // FIXME: Proxy not supported, would require proxy capabilities in Tomcat
        /* } else if (flag.startsWith("proxy") || flag.startsWith("P")) {
            rule.setProxy(true);*/
        } else if (flag.startsWith("qsappend") || flag.startsWith("QSA")) {
            rule.setQsappend(true);
        } else if (flag.startsWith("redirect") || flag.startsWith("R")) {
            if (flag.startsWith("redirect=")) {
                flag = flag.substring("redirect=".length());
                rule.setRedirect(true);
                rule.setRedirectCode(Integer.parseInt(flag));
            } else if (flag.startsWith("R=")) {
                flag = flag.substring("R=".length());
                rule.setRedirect(true);
                rule.setRedirectCode(Integer.parseInt(flag));
            } else {
                rule.setRedirect(true);
                rule.setRedirectCode(HttpServletResponse.SC_FOUND);
            }
        } else if (flag.startsWith("skip") || flag.startsWith("S")) {
            if (flag.startsWith("skip=")) {
                flag = flag.substring("skip=".length());
            } else if (flag.startsWith("S=")) {
                flag = flag.substring("S=".length());
            }
            rule.setSkip(Integer.parseInt(flag));
        } else if (flag.startsWith("type") || flag.startsWith("T")) {
            if (flag.startsWith("type=")) {
                flag = flag.substring("type=".length());
            } else if (flag.startsWith("T=")) {
                flag = flag.substring("T=".length());
            }
            rule.setType(true);
            rule.setTypeValue(flag);
        } else {
            throw new IllegalArgumentException("Invalid flag in: " + line + " flag: " + flag);
        }
    }
-----CSCI578-----

    public void setCookieName(String cookieName) {
        this.cookieName = cookieName;
    }
-----CSCI578-----


    public void setCookieHttpOnly(boolean cookieHttpOnly) {
        this.cookieHttpOnly = cookieHttpOnly;
    }
-----CSCI578-----

    public void setGone(boolean gone) {
        this.gone = gone;
    }
-----CSCI578-----

    public void setRedirect(boolean redirect) {
        this.redirect = redirect;
    }
-----CSCI578-----

    public void setForbidden(boolean forbidden) {
        this.forbidden = forbidden;
    }
-----CSCI578-----

    public void setType(boolean type) {
        this.type = type;
    }
-----CSCI578-----

    public void setEnv(boolean env) {
        this.env = env;
    }
-----CSCI578-----


    public void setCookieLifetime(int cookieLifetime) {
        this.cookieLifetime = cookieLifetime;
    }
-----CSCI578-----

    public void addEnvName(String envName) {
        this.envName.add(envName);
    }
-----CSCI578-----

    public void setSkip(int skip) {
        this.skip = skip;
    }
-----CSCI578-----

    public void setRedirectCode(int redirectCode) {
        this.redirectCode = redirectCode;
    }
-----CSCI578-----

    public void setTypeValue(String typeValue) {
        this.typeValue = typeValue;
    }
-----CSCI578-----

    public void setNext(boolean next) {
        this.next = next;
    }
-----CSCI578-----


    public void setCookieDomain(String cookieDomain) {
        this.cookieDomain = cookieDomain;
    }
-----CSCI578-----

    public void addEnvValue(String envValue) {
        this.envValue.add(envValue);
    }
-----CSCI578-----

    public void setNocase(boolean nocase) {
        this.nocase = nocase;
    }
-----CSCI578-----

    public void setQsappend(boolean qsappend) {
        this.qsappend = qsappend;
    }
-----CSCI578-----


    public void setCookiePath(String cookiePath) {
        this.cookiePath = cookiePath;
    }
-----CSCI578-----

    public void setChain(boolean chain) {
        this.chain = chain;
    }
