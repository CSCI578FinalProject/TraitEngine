20
-----CSCI578-----



    protected abstract Processor createUpgradeProcessor(
            SocketWrapperBase<?> socket, ByteBuffer leftoverInput,
            UpgradeToken upgradeToken);
-----CSCI578-----



    /**
     * Create and configure a new Processor instance for the current protocol
     * implementation.
     *
     * @return A fully configured Processor instance that is ready to use
     */
    protected abstract Processor createProcessor();
-----CSCI578-----


    UpgradeToken getUpgradeToken();
-----CSCI578-----


    /**
     * @param socketWrapper The socketWrapper for the connection that requires
     *                      a processor
     * @param adapter The Adapter instance that provides access to the standard
     *                Engine/Host/Context/Wrapper processing chain
     *
     * @return A processor instance for processing a connection using this
     *         protocol.
     */
    public Processor getProcessor(SocketWrapperBase<?> socketWrapper, Adapter adapter);
-----CSCI578-----
-----CSCI578-----


    /**
     * Allows retrieving additional input during the upgrade process
     * @return leftover bytes
     */
    ByteBuffer getLeftoverInput();
-----CSCI578-----

    public String getNegotiatedProtocol() { return negotiatedProtocol; }
-----CSCI578-----


    /**
     * Process a connection. This is called whenever an event occurs (e.g. more
     * data arrives) that allows processing to continue for a connection that is
     * not currently being processed.
     *
     * @param socketWrapper The connection to process
     * @param status The status of the connection that triggered this additional
     *               processing
     *
     * @return The state the caller should put the socket in when this method
     *         returns
     *
     * @throws IOException If an I/O error occurs during the processing of the
     *         request
     */
    SocketState process(SocketWrapperBase<?> socketWrapper, SocketEvent status) throws IOException;
-----CSCI578-----


    public final InstanceManager getInstanceManager() {
        return instanceManager;
    }
-----CSCI578-----

    boolean isAsync();
-----CSCI578-----
-----CSCI578-----

    public String getClientCertProvider() { return clientCertProvider; }
-----CSCI578-----



    public void addWaitingProcessor(Processor processor) {
        waitingProcessors.add(processor);
    }
-----CSCI578-----


    /**
     * Set the SSL information for this HTTP connection.
     *
     * @param sslSupport The SSL support object to use for this connection
     */
    void setSslSupport(SSLSupport sslSupport);
-----CSCI578-----


    public abstract SSLSupport getSslSupport(String clientCertProvider);
-----CSCI578-----

    public void setUpgraded(boolean upgraded) { this.upgraded = upgraded; }
-----CSCI578-----


    boolean isUpgrade();
-----CSCI578-----



    public void removeWaitingProcessor(Processor processor) {
        waitingProcessors.remove(processor);
    }
-----CSCI578-----
-----CSCI578-----
