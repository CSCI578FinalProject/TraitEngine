26
-----CSCI578-----

    public String getRestrictedUserAgents() { return restrictedUserAgents; }
-----CSCI578-----

    public int getMaxHttpHeaderSize() { return maxHttpHeaderSize; }
-----CSCI578-----
-----CSCI578-----

    public int getMaxSwallowSize() { return maxSwallowSize; }
-----CSCI578-----



    // ------------------------------------------------------------- Common code

    @Override
    protected Processor createProcessor() {
        Http11Processor processor = new Http11Processor(getMaxHttpHeaderSize(), getEndpoint(),
                getMaxTrailerSize(), allowedTrailerHeaders, getMaxExtensionSize(),
                getMaxSwallowSize(), httpUpgradeProtocols);
        processor.setAdapter(getAdapter());
        processor.setMaxKeepAliveRequests(getMaxKeepAliveRequests());
        processor.setConnectionUploadTimeout(getConnectionUploadTimeout());
        processor.setDisableUploadTimeout(getDisableUploadTimeout());
        processor.setCompressionMinSize(getCompressionMinSize());
        processor.setCompression(getCompression());
        processor.setNoCompressionUserAgents(getNoCompressionUserAgents());
        processor.setCompressableMimeTypes(getCompressableMimeTypes());
        processor.setRestrictedUserAgents(getRestrictedUserAgents());
        processor.setMaxSavePostSize(getMaxSavePostSize());
        processor.setServer(getServer());
        return processor;
    }
-----CSCI578-----

    public int getMaxExtensionSize() { return maxExtensionSize; }
-----CSCI578-----

    public int getCompressionMinSize() { return compressionMinSize; }
-----CSCI578-----



    /**
     * Set compression level.
     *
     * @param compression One of <code>on</code>, <code>force</code>,
     *                    <code>off</code> or the minimum compression size in
     *                    bytes which implies <code>on</code>
     */
    public void setCompression(String compression) {
        if (compression.equals("on")) {
            this.compressionLevel = 1;
        } else if (compression.equals("force")) {
            this.compressionLevel = 2;
        } else if (compression.equals("off")) {
            this.compressionLevel = 0;
        } else {
            try {
                // Try to parse compression as an int, which would give the
                // minimum compression size
                compressionMinSize = Integer.parseInt(compression);
                this.compressionLevel = 1;
            } catch (Exception e) {
                this.compressionLevel = 0;
            }
        }
    }
-----CSCI578-----



    /**
     * Set the maximum size of a POST which will be buffered in SSL mode.
     * When a POST is received where the security constraints require a client
     * certificate, the POST body needs to be buffered while an SSL handshake
     * takes place to obtain the certificate.
     *
     * @param msps The maximum size POST body to buffer in bytes
     */
    public void setMaxSavePostSize(int msps) {
        maxSavePostSize = msps;
    }
-----CSCI578-----

    public boolean getDisableUploadTimeout() { return disableUploadTimeout; }
-----CSCI578-----



    /**
     * Set the server header name.
     *
     * @param server The new value to use for the server header
     */
    public void setServer(String server) {
        if (server == null || server.equals("")) {
            this.server = null;
        } else {
            this.server = server;
        }
    }
-----CSCI578-----

    public int getConnectionUploadTimeout() { return connectionUploadTimeout; }
-----CSCI578-----

    public String getCompression() { return compression; }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----

    public int getMaxSavePostSize() { return maxSavePostSize; }
-----CSCI578-----

    public String[] getCompressableMimeTypes() {
        String[] result = compressableMimeTypes;
        if (result != null) {
            return result;
        }
        List<String> values = new ArrayList<>();
        StringTokenizer tokens = new StringTokenizer(compressableMimeType, ",");
        while (tokens.hasMoreTokens()) {
            String token = tokens.nextToken().trim();
            if (token.length() > 0) {
                values.add(token);
            }
        }
        result = values.toArray(new String[values.size()]);
        compressableMimeTypes = result;
        return result;
    }
-----CSCI578-----



    /**
     * Set the maximum number of Keep-Alive requests to allow.
     * This is to safeguard from DoS attacks. Setting to a negative
     * value disables the limit.
     *
     * @param mkar The new maximum number of Keep-Alive requests allowed
     */
    public void setMaxKeepAliveRequests(int mkar) {
        maxKeepAliveRequests = mkar;
    }
-----CSCI578-----



    /**
     * Set compressible mime-type list (this method is best when used with
     * a large number of connectors, where it would be better to have all of
     * them referenced a single array).
     *
     * @param compressableMimeTypes MIME types for which compression should be
     *                              enabled
     */
    public void setCompressableMimeTypes(String[] compressableMimeTypes) {
        this.compressableMimeTypes = compressableMimeTypes;
    }
-----CSCI578-----
-----CSCI578-----


    /**
     * Set the upload timeout.
     *
     * @param timeout Upload timeout in milliseconds
     */
    public void setConnectionUploadTimeout(int timeout) {
        connectionUploadTimeout = timeout ;
    }
-----CSCI578-----

    public String getNoCompressionUserAgents() {
        return noCompressionUserAgents;
    }
-----CSCI578-----

    public String getServer() { return server; }
-----CSCI578-----
-----CSCI578-----

    public int getMaxTrailerSize() { return maxTrailerSize; }
-----CSCI578-----


    /**
     * Set Minimum size to trigger compression.
     *
     * @param compressionMinSize The minimum content length required for
     *                           compression in bytes
     */
    public void setCompressionMinSize(int compressionMinSize) {
        this.compressionMinSize = compressionMinSize;
    }
