20
-----CSCI578-----



    public void setInitialWindowSize(int initialWindowSize) {
        localSettings.set(Setting.INITIAL_WINDOW_SIZE, initialWindowSize);
    }
-----CSCI578-----



    public long getKeepAliveTimeout() {
        return keepAliveTimeout;
    }
-----CSCI578-----
-----CSCI578-----



    @Override
    protected synchronized void set(Setting setting, Long value) {
        checkSend();
        if (current.get(setting).longValue() == value.longValue()) {
            pending.remove(setting);
        } else {
            pending.put(setting, value);
        }
    }
-----CSCI578-----



    @Override
    public InternalHttpUpgradeHandler getInternalUpgradeHandler(Adapter adapter,
            Request coyoteRequest) {
        Http2UpgradeHandler result = new Http2UpgradeHandler(adapter, coyoteRequest);

        result.setReadTimeout(getReadTimeout());
        result.setKeepAliveTimeout(getKeepAliveTimeout());
        result.setWriteTimeout(getWriteTimeout());
        result.setMaxConcurrentStreams(getMaxConcurrentStreams());
        result.setInitialWindowSize(getInitialWindowSize());

        return result;
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----



    public int getInitialWindowSize() {
        return initialWindowSize;
    }
-----CSCI578-----



    public void setReadTimeout(long readTimeout) {
        this.readTimeout = readTimeout;
    }
-----CSCI578-----


    @Override
    public Processor getProcessor(SocketWrapperBase<?> socketWrapper, Adapter adapter) {
        UpgradeProcessorInternal processor = new UpgradeProcessorInternal(socketWrapper, null,
                new UpgradeToken(getInternalUpgradeHandler(adapter, null), null, null));
        return processor;
    }
-----CSCI578-----



    public void setKeepAliveTimeout(long keepAliveTimeout) {
        this.keepAliveTimeout = keepAliveTimeout;
    }
-----CSCI578-----



    public long getWriteTimeout() {
        return writeTimeout;
    }
-----CSCI578-----



    public void setWriteTimeout(long writeTimeout) {
        this.writeTimeout = writeTimeout;
    }
-----CSCI578-----
-----CSCI578-----



    public long getMaxConcurrentStreams() {
        return maxConcurrentStreams;
    }
-----CSCI578-----
-----CSCI578-----



    public void setMaxConcurrentStreams(long maxConcurrentStreams) {
        localSettings.set(Setting.MAX_CONCURRENT_STREAMS, maxConcurrentStreams);
    }
-----CSCI578-----



    public long getReadTimeout() {
        return readTimeout;
    }
-----CSCI578-----
-----CSCI578-----



    private void checkSend() {
        if (sendInProgress) {
            // Coding error. No need for i18n
            throw new IllegalStateException();
        }
    }
