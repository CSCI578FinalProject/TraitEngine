4
-----CSCI578-----
-----CSCI578-----



    private void pruneClosedStreams() {
        // Only prune every 10 new streams
        if (newStreamsSinceLastPrune < 9) {
            // Not atomic. Increments may be lost. Not a problem.
            newStreamsSinceLastPrune++;
            return;
        }
        // Reset counter
        newStreamsSinceLastPrune = 0;

        // RFC 7540, 5.3.4 endpoints should maintain state for at least the
        // maximum number of concurrent streams
        long max = localSettings.getMaxConcurrentStreams();

        if (log.isDebugEnabled()) {
            log.debug(sm.getString("upgradeHandler.pruneStart", connectionId,
                    Long.toString(max), Integer.toString(streams.size())));
        }

        // Allow an additional 10% for closed streams that are used in the
        // priority tree
        max = max + max / 10;
        if (max > Integer.MAX_VALUE) {
            max = Integer.MAX_VALUE;
        }

        int toClose = streams.size() - (int) max;
        if (toClose < 1) {
            return;
        }

        // Need to try and close some streams.
        // Use this Set to keep track of streams that might be part of the
        // priority tree. Only remove these if we absolutely have to.
        TreeSet<Integer> additionalCandidates = new TreeSet<>();

        Iterator<Entry<Integer,Stream>> entryIter = streams.entrySet().iterator();
        while (entryIter.hasNext() && toClose > 0) {
            Entry<Integer,Stream> entry = entryIter.next();
            Stream stream = entry.getValue();
            // Never remove active streams or streams with children
            if (stream.isActive() || stream.getChildStreams().size() > 0) {
                continue;
            }
            if (stream.isClosedFinal()) {
                // This stream went from IDLE to CLOSED and is likely to have
                // been created by the client as part of the priority tree. Keep
                // it if possible.
                additionalCandidates.add(entry.getKey());
            } else {
                if (log.isDebugEnabled()) {
                    log.debug(sm.getString("upgradeHandler.pruned", connectionId, entry.getKey()));
                }
                entryIter.remove();
                toClose--;
            }
        }

        while (toClose > 0 && additionalCandidates.size() > 0) {
            Integer pruned = additionalCandidates.pollLast();
            if (log.isDebugEnabled()) {
                log.debug(sm.getString("upgradeHandler.prunedPriority", connectionId, pruned));
            }
            toClose++;
        }

        if (toClose > 0) {
            log.warn(sm.getString("upgradeHandler.pruneIncomplete", connectionId,
                    Integer.toString(toClose)));
        }
    }
-----CSCI578-----



    private Stream createRemoteStream(int streamId) throws ConnectionException {
        Integer key = Integer.valueOf(streamId);

        if (streamId %2 != 1) {
            throw new ConnectionException(
                    sm.getString("upgradeHandler.stream.even", key), Http2Error.PROTOCOL_ERROR);
        }

        if (streamId <= maxRemoteStreamId) {
            throw new ConnectionException(sm.getString("upgradeHandler.stream.old", key,
                    Integer.valueOf(maxRemoteStreamId)), Http2Error.PROTOCOL_ERROR);
        }

        pruneClosedStreams();

        Stream result = new Stream(key, this);
        streams.put(key, result);
        maxRemoteStreamId = streamId;
        return result;
    }
-----CSCI578-----
