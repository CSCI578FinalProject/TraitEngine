13
-----CSCI578-----
-----CSCI578-----



    boolean isPushSupported() {
        return handler.getRemoteSettings().getEnablePush();
    }
-----CSCI578-----



    ConnectionSettingsRemote getRemoteSettings() {
        return remoteSettings;
    }
-----CSCI578-----
-----CSCI578-----



    boolean push(Request request) throws IOException {
        if (!isPushSupported()) {
            return false;
        }
        // Set the special HTTP/2 headers
        request.getMimeHeaders().addValue(":method").duplicate(request.method());
        request.getMimeHeaders().addValue(":scheme").duplicate(request.scheme());
        StringBuilder path = new StringBuilder(request.requestURI().toString());
        if (!request.queryString().isNull()) {
            path.append('?');
            path.append(request.queryString().toString());
        }
        request.getMimeHeaders().addValue(":path").setString(path.toString());

        // Authority needs to include the port only if a non-standard port is
        // being used.
        if (!(request.scheme().equals("http") && request.getServerPort() == 80) &&
                !(request.scheme().equals("https") && request.getServerPort() == 443)) {
            request.getMimeHeaders().addValue(":authority").setString(
                    request.serverName().getString() + ":" + request.getServerPort());
        } else {
            request.getMimeHeaders().addValue(":authority").duplicate(request.serverName());
        }

        push(handler, request, this);

        return true;
    }



    private static void push(final Http2UpgradeHandler handler, final Request request, final Stream stream)
            throws IOException {
        if (org.apache.coyote.Constants.IS_SECURITY_ENABLED) {
            try {
                AccessController.doPrivileged(
                        new PrivilegedExceptionAction<Void>() {
                            @Override
                            public Void run() throws IOException {
                                handler.push(request, stream);
                                return null;
                            }
                        });
            } catch (PrivilegedActionException ex) {
                Exception e = ex.getException();
                if (e instanceof IOException) {
                    throw (IOException) e;
                } else {
                    throw new IOException(ex);
                }
            }

        } else {
            handler.push(request, stream);
        }
    }
-----CSCI578-----



    // ------------------------------------------------------------- Properties

    public MimeHeaders getMimeHeaders() {
        return headers;
    }
-----CSCI578-----


    public MessageBytes method() {
        return methodMB;
    }
-----CSCI578-----


    /**
     * Create a new named header , return the MessageBytes
     * container for the new value
     * @param name The header name
     * @return the message bytes container for the value
     */
    public MessageBytes addValue( String name ) {
         MimeHeaderField mh = createHeader();
        mh.getName().setString(name);
        return mh.getValue();
    }


    /**
     * Create a new named header using un-translated byte[].
     * The conversion to chars can be delayed until
     * encoding is known.
     * @param b The header name bytes
     * @param startN Offset
     * @param len Length
     * @return the message bytes container for the value
     */
    public MessageBytes addValue(byte b[], int startN, int len)
    {
        MimeHeaderField mhf=createHeader();
        mhf.getName().setBytes(b, startN, len);
        return mhf.getValue();
    }
-----CSCI578-----


    /**
     * Get the "virtual host", derived from the Host: header associated with
     * this request.
     *
     * @return The buffer holding the server name, if any. Use isNull() to check
     *         if there is no value set.
     */
    public MessageBytes serverName() {
        return serverNameMB;
    }
-----CSCI578-----


    public MessageBytes requestURI() {
        return uriMB;
    }
-----CSCI578-----


    public int getServerPort() {
        return serverPort;
    }
-----CSCI578-----


    public MessageBytes queryString() {
        return queryMB;
    }
-----CSCI578-----


    public int getServerPort() {
        return req.getServerPort();
    }
