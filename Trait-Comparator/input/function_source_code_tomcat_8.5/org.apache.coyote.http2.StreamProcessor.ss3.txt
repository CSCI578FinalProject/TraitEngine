8
-----CSCI578-----
-----CSCI578-----


    public boolean isConnectionIoAllowed() {
        return connectionIoAllowed;
    }
-----CSCI578-----



    void close(Http2Exception http2Exception) {
        if (http2Exception instanceof StreamException) {
            try {
                handler.resetStream((StreamException) http2Exception);
            } catch (IOException ioe) {
                ConnectionException ce = new ConnectionException(
                        sm.getString("stream.reset.fail"), Http2Error.PROTOCOL_ERROR);
                ce.initCause(ioe);
                handler.closeConnection(ce);
            }
        } else {
            handler.closeConnection(http2Exception);
        }
    }
-----CSCI578-----



    @Override
    public synchronized void run() {
        // HTTP/2 equivalent of AbstractConnectionHandler#process() without the
        // socket <-> processor mapping
        ContainerThreadMarker.set();
        SocketState state = SocketState.CLOSED;
        try {
            state = process(socketWrapper, SocketEvent.OPEN_READ);

            if (state == SocketState.CLOSED) {
                if (!getErrorState().isConnectionIoAllowed()) {
                    ConnectionException ce = new ConnectionException(sm.getString(
                            "streamProcessor.error.connection", stream.getConnectionId(),
                            stream.getIdentifier()), Http2Error.INTERNAL_ERROR);
                    stream.close(ce);
                } else if (!getErrorState().isIoAllowed()) {
                    StreamException se = new StreamException(sm.getString(
                            "streamProcessor.error.stream", stream.getConnectionId(),
                            stream.getIdentifier()), Http2Error.INTERNAL_ERROR,
                            stream.getIdentifier().intValue());
                    stream.close(se);
                }
            }
        } catch (Exception e) {
            ConnectionException ce = new ConnectionException(sm.getString(
                    "streamProcessor.error.connection", stream.getConnectionId(),
                    stream.getIdentifier()), Http2Error.INTERNAL_ERROR);
            ce.initCause(e);
            stream.close(ce);
        } finally {
            ContainerThreadMarker.clear();
        }
    }
-----CSCI578-----
-----CSCI578-----


    public boolean isIoAllowed() {
        return ioAllowed;
    }
-----CSCI578-----


    public static void set() {
        marker.set(Boolean.TRUE);
    }
-----CSCI578-----


    public static void clear() {
        marker.set(Boolean.FALSE);
    }
