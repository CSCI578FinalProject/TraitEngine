12
-----CSCI578-----


  private boolean jj_3R_106() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }
-----CSCI578-----


  private boolean jj_3R_103() {
    if (jj_3R_106()) return true;
    return false;
  }
-----CSCI578-----


  private boolean jj_3R_99() {
    if (jj_scan_token(START_SET_OR_MAP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }
-----CSCI578-----


  private boolean jj_3R_89() {
    if (jj_3R_99()) return true;
    return false;
  }
-----CSCI578-----


  private boolean jj_3R_94() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }
-----CSCI578-----


  private boolean jj_3R_82() {
    if (jj_3R_94()) return true;
    return false;
  }
-----CSCI578-----


  private boolean jj_3R_81() {
    if (jj_3R_93()) return true;
    return false;
  }
-----CSCI578-----


  private boolean jj_3R_93() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }
-----CSCI578-----


  private boolean jj_3R_84() {
    if (jj_3R_96()) return true;
    return false;
  }
-----CSCI578-----


  private boolean jj_3R_96() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }
-----CSCI578-----
-----CSCI578-----


/*
 * Concatenation
 * For +=, then Math
 *
 */
  final public void Concatenation() throws ParseException {
    Math();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_11;
      }
      jj_consume_token(CONCAT);
                    AstConcatenation jjtn001 = new AstConcatenation(JJTCONCATENATION);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
      try {
        Math();
      } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
      } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
      }
    }
  }
