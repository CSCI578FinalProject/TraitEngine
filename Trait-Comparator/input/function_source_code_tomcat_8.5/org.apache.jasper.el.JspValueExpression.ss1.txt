12
-----CSCI578-----
-----CSCI578-----


    @Override
    public void setValue(ELContext context, Object value)
            throws NullPointerException, PropertyNotFoundException,
            PropertyNotWritableException, ELException {
        context.notifyBeforeEvaluation(getExpressionString());
        try {
            this.target.setValue(context, value);
            context.notifyAfterEvaluation(getExpressionString());
        } catch (PropertyNotWritableException e) {
            if (e instanceof JspPropertyNotWritableException) throw e;
            throw new JspPropertyNotWritableException(this.mark, e);
        } catch (PropertyNotFoundException e) {
            if (e instanceof JspPropertyNotFoundException) throw e;
            throw new JspPropertyNotFoundException(this.mark, e);
        } catch (ELException e) {
            if (e instanceof JspELException) throw e;
            throw new JspELException(this.mark, e);
        }
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----


    @Override
    public String getExpressionString() {
        return this.target.getExpressionString();
    }
-----CSCI578-----


    @Override
    public MethodInfo getMethodInfo(ELContext context)
            throws NullPointerException, PropertyNotFoundException,
            MethodNotFoundException, ELException {
        context.notifyBeforeEvaluation(getExpressionString());
        try {
            MethodInfo result = this.target.getMethodInfo(context);
            context.notifyAfterEvaluation(getExpressionString());
            return result;
        } catch (MethodNotFoundException e) {
            if (e instanceof JspMethodNotFoundException) throw e;
            throw new JspMethodNotFoundException(this.mark, e);
        } catch (PropertyNotFoundException e) {
            if (e instanceof JspPropertyNotFoundException) throw e;
            throw new JspPropertyNotFoundException(this.mark, e);
        } catch (ELException e) {
            if (e instanceof JspELException) throw e;
            throw new JspELException(this.mark, e);
        }
    }
-----CSCI578-----


    @Override
    public Object invoke(ELContext context, Object[] params)
            throws NullPointerException, PropertyNotFoundException,
            MethodNotFoundException, ELException {
        context.notifyBeforeEvaluation(getExpressionString());
        try {
            Object result = this.target.invoke(context, params);
            context.notifyAfterEvaluation(getExpressionString());
            return result;
        } catch (MethodNotFoundException e) {
            if (e instanceof JspMethodNotFoundException) throw e;
            throw new JspMethodNotFoundException(this.mark, e);
        } catch (PropertyNotFoundException e) {
            if (e instanceof JspPropertyNotFoundException) throw e;
            throw new JspPropertyNotFoundException(this.mark, e);
        } catch (ELException e) {
            if (e instanceof JspELException) throw e;
            throw new JspELException(this.mark, e);
        }
    }
-----CSCI578-----


    @Override
    public Class<?> getType(ELContext context) throws NullPointerException,
            PropertyNotFoundException, ELException {
        context.notifyBeforeEvaluation(getExpressionString());
        try {
            Class<?> result = this.target.getType(context);
            context.notifyAfterEvaluation(getExpressionString());
            return result;
        } catch (PropertyNotFoundException e) {
            if (e instanceof JspPropertyNotFoundException) throw e;
            throw new JspPropertyNotFoundException(this.mark, e);
        } catch (ELException e) {
            if (e instanceof JspELException) throw e;
            throw new JspELException(this.mark, e);
        }
    }
-----CSCI578-----


    @Override
    public boolean isReadOnly(ELContext context) throws NullPointerException,
            PropertyNotFoundException, ELException {
        context.notifyBeforeEvaluation(getExpressionString());
        try {
            boolean result = this.target.isReadOnly(context);
            context.notifyAfterEvaluation(getExpressionString());
            return result;
        } catch (PropertyNotFoundException e) {
            if (e instanceof JspPropertyNotFoundException) throw e;
            throw new JspPropertyNotFoundException(this.mark, e);
        } catch (ELException e) {
            if (e instanceof JspELException) throw e;
            throw new JspELException(this.mark, e);
        }
    }
-----CSCI578-----


    @Override
    public Object getValue(ELContext context) throws NullPointerException,
            PropertyNotFoundException, ELException {
        context.notifyBeforeEvaluation(getExpressionString());
        try {
            Object result = this.target.getValue(context);
            context.notifyAfterEvaluation(getExpressionString());
            return result;
        } catch (PropertyNotFoundException e) {
            if (e instanceof JspPropertyNotFoundException) throw e;
            throw new JspPropertyNotFoundException(this.mark, e);
        } catch (ELException e) {
            if (e instanceof JspELException) throw e;
            throw new JspELException(this.mark, e);
        }
    }
-----CSCI578-----


    @Override
    public String getExpressionString() {
        return this.target.getExpressionString();
    }
-----CSCI578-----
