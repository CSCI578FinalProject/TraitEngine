21
-----CSCI578-----


    /**
     * Gets the current value of the flag that controls if a connection will be
     * rolled back when it is returned to the pool if auto commit is not enabled
     * and the connection is not read only.
     * @return <code>true</code> to rollback non committed connections
     */
    public boolean getRollbackOnReturn() {
        return rollbackOnReturn;
    }
-----CSCI578-----


    /**
     * @see #isFastFailValidation()
     * @param fastFailValidation true means connections created by this factory will
     * fast fail validation
     * @since 2.1
     */
    public void setFastFailValidation(boolean fastFailValidation) {
        _fastFailValidation = fastFailValidation;
    }
-----CSCI578-----


    public void setEnableAutoCommitOnReturn(boolean enableAutoCommitOnReturn) {
        this.enableAutoCommitOnReturn = enableAutoCommitOnReturn;
    }
-----CSCI578-----
-----CSCI578-----


    /**
     * Sets the maximum lifetime in milliseconds of a connection after which the
     * connection will always fail activation, passivation and validation. A
     * value of zero or less indicates an infinite lifetime. The default value
     * is -1.
     * @param maxConnLifetimeMillis The maximum connection lifetime
     */
    public void setMaxConnLifetimeMillis(long maxConnLifetimeMillis) {
        this.maxConnLifetimeMillis = maxConnLifetimeMillis;
    }
-----CSCI578-----


    public void setDefaultQueryTimeout(Integer defaultQueryTimeout) {
        this.defaultQueryTimeout = defaultQueryTimeout;
    }
-----CSCI578-----
-----CSCI578-----


    /**
     * Creates the PoolableConnectionFactory and attaches it to the connection pool.  This method only exists
     * so subclasses can replace the default implementation.
     *
     * @param driverConnectionFactory JDBC connection factory
     * @return the connection factory
     * @throws SQLException if an error occurs creating the PoolableConnectionFactory
     */
    protected PoolableConnectionFactory createPoolableConnectionFactory(
            ConnectionFactory driverConnectionFactory) throws SQLException {
        PoolableConnectionFactory connectionFactory = null;
        try {
            connectionFactory = new PoolableConnectionFactory(driverConnectionFactory, registeredJmxName);
            connectionFactory.setValidationQuery(validationQuery);
            connectionFactory.setValidationQueryTimeout(validationQueryTimeout);
            connectionFactory.setConnectionInitSql(connectionInitSqls);
            connectionFactory.setDefaultReadOnly(defaultReadOnly);
            connectionFactory.setDefaultAutoCommit(defaultAutoCommit);
            connectionFactory.setDefaultTransactionIsolation(defaultTransactionIsolation);
            connectionFactory.setDefaultCatalog(defaultCatalog);
            connectionFactory.setCacheState(cacheState);
            connectionFactory.setPoolStatements(poolPreparedStatements);
            connectionFactory.setMaxOpenPrepatedStatements(maxOpenPreparedStatements);
            connectionFactory.setMaxConnLifetimeMillis(maxConnLifetimeMillis);
            connectionFactory.setRollbackOnReturn(getRollbackOnReturn());
            connectionFactory.setEnableAutoCommitOnReturn(getEnableAutoCommitOnReturn());
            connectionFactory.setDefaultQueryTimeout(getDefaultQueryTimeout());
            connectionFactory.setFastFailValidation(fastFailValidation);
            connectionFactory.setDisconnectionSqlCodes(disconnectionSqlCodes);
            validateConnectionFactory(connectionFactory);
        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            throw new SQLException("Cannot create PoolableConnectionFactory (" + e.getMessage() + ")", e);
        }
        return connectionFactory;
    }
-----CSCI578-----


    public void setRollbackOnReturn(boolean rollbackOnReturn) {
        this.rollbackOnReturn = rollbackOnReturn;
    }
-----CSCI578-----
-----CSCI578-----


    public void setCacheState(boolean cacheState) {
        this._cacheState = cacheState;
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----


    /**
     * Sets the validation query timeout, the amount of time, in seconds, that
     * connection validation will wait for a response from the database when
     * executing a validation query.  Use a value less than or equal to 0 for
     * no timeout.
     *
     * @param timeout new validation query timeout value in seconds
     */
    public void setValidationQueryTimeout(int timeout) {
        _validationQueryTimeout = timeout;
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----


    /**
     * @see #getDisconnectionSqlCodes()
     * @param disconnectionSqlCodes The disconnection codes
     * @since 2.1
     */
    public void setDisconnectionSqlCodes(Collection<String> disconnectionSqlCodes) {
        _disconnectionSqlCodes = disconnectionSqlCodes;
    }


    /**
     * True means that validation will fail immediately for connections that
     * have previously thrown SQLExceptions with SQL_STATE indicating fatal
     * disconnection errors.
     *
     * @return true if connections created by this factory will fast fail validation.
     * @see #setDisconnectionSqlCodes(Collection)
     * @since 2.1
     */
    public boolean isFastFailValidation() {
        return _fastFailValidation;
    }
-----CSCI578-----
-----CSCI578-----
