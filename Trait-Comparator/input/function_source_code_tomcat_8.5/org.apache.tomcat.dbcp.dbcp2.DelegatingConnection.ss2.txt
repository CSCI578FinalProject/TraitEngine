5
-----CSCI578-----


    /**
     * Closes the underlying connection, and close any Statements that were not
     * explicitly closed. Sub-classes that override this method must:
     * <ol>
     * <li>Call passivate()</li>
     * <li>Call close (or the equivalent appropriate action) on the wrapped
     *     connection</li>
     * <li>Set _closed to <code>false</code></li>
     * </ol>
     * @throws SQLException Error closing connection
     */
    @Override
    public void close() throws SQLException {
        if (!_closed) {
            closeInternal();
        }
    }


    protected void passivate() throws SQLException {
        // The JDBC spec requires that a Connection close any open
        // Statement's when it is closed.
        // DBCP-288. Not all the traced objects will be statements
        List<AbandonedTrace> traces = getTrace();
        if(traces != null && traces.size() > 0) {
            Iterator<AbandonedTrace> traceIter = traces.iterator();
            while (traceIter.hasNext()) {
                Object trace = traceIter.next();
                if (trace instanceof Statement) {
                    ((Statement) trace).close();
                } else if (trace instanceof ResultSet) {
                    // DBCP-265: Need to close the result sets that are
                    // generated via DatabaseMetaData
                    ((ResultSet) trace).close();
                }
            }
            clearTrace();
        }
        setLastUsed(0);
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----


    protected void activate() {
        _closed = false;
        setLastUsed();
        if(_conn instanceof DelegatingConnection) {
            ((DelegatingConnection<?>)_conn).activate();
        }
    }
