180
-----CSCI578-----
-----CSCI578-----


    @Override
    protected void handleException(SQLException e) throws SQLException {
        _fatalSqlExceptionThrown |= isDisconnectionSqlException(e);
        super.handleException(e);
    }
-----CSCI578-----


    protected void handleException(SQLException e) throws SQLException {
        throw e;
    }
-----CSCI578-----



    @Override
    public void clearWarnings() throws SQLException {
        checkOpen();
        try {
            _conn.clearWarnings();
        } catch (SQLException e) {
            handleException(e);
        }
    }
-----CSCI578-----



    @Override
    public void commit() throws SQLException {
        checkOpen();
        try {
            _conn.commit();
        } catch (SQLException e) {
            handleException(e);
        }
    }
-----CSCI578-----


    @Override
    public boolean getAutoCommit() throws SQLException {
        checkOpen();
        if (_cacheState && _autoCommitCached != null) {
            return _autoCommitCached.booleanValue();
        }
        try {
            _autoCommitCached = Boolean.valueOf(_conn.getAutoCommit());
            return _autoCommitCached.booleanValue();
        } catch (SQLException e) {
            handleException(e);
            return false;
        }
    }
-----CSCI578-----



    @Override
    public String getCatalog() throws SQLException {
        checkOpen();
        try {
            return _conn.getCatalog();
        } catch (SQLException e) {
            handleException(e);
            return null;
        }
    }
-----CSCI578-----



    @Override
    public int getTransactionIsolation() throws SQLException {
        checkOpen();
        try {
            return _conn.getTransactionIsolation();
        } catch (SQLException e) {
            handleException(e);
            return -1;
        }
    }
-----CSCI578-----



    @Override
    public Map<String,Class<?>> getTypeMap() throws SQLException {
        checkOpen();
        try {
            return _conn.getTypeMap();
        } catch (SQLException e) {
            handleException(e);
            return null;
        }
    }
-----CSCI578-----



    @Override
    public SQLWarning getWarnings() throws SQLException {
        checkOpen();
        try {
            return _conn.getWarnings();
        } catch (SQLException e) {
            handleException(e);
            return null;
        }
    }
-----CSCI578-----



    @Override
    public boolean isReadOnly() throws SQLException {
        checkOpen();
        if (_cacheState && _readOnlyCached != null) {
            return _readOnlyCached.booleanValue();
        }
        try {
            _readOnlyCached = Boolean.valueOf(_conn.isReadOnly());
            return _readOnlyCached.booleanValue();
        } catch (SQLException e) {
            handleException(e);
            return false;
        }
    }
-----CSCI578-----



    @Override
    public String nativeSQL(String sql) throws SQLException {
        checkOpen();
        try {
            return _conn.nativeSQL(sql);
        } catch (SQLException e) {
            handleException(e);
            return null;
        }
    }
-----CSCI578-----



    @Override
    public void rollback() throws SQLException {
        checkOpen();
        try {
            _conn.rollback();
        } catch (SQLException e) {
            handleException(e);
        }
    }



    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
        checkOpen();
        try {
            _conn.rollback(savepoint);
        } catch (SQLException e) {
            handleException(e);
        }
    }
-----CSCI578-----


    @Override
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        checkOpen();
        try {
            _conn.setAutoCommit(autoCommit);
            if (_cacheState) {
                _autoCommitCached = Boolean.valueOf(autoCommit);
            }
        } catch (SQLException e) {
            _autoCommitCached = null;
            handleException(e);
        }
    }
-----CSCI578-----


    @Override
    public void setCatalog(String catalog) throws SQLException
    { checkOpen(); try { _conn.setCatalog(catalog); } catch (SQLException e) { handleException(e); } }
-----CSCI578-----


    @Override
    public void setReadOnly(boolean readOnly) throws SQLException {
        checkOpen();
        try {
            _conn.setReadOnly(readOnly);
            if (_cacheState) {
                _readOnlyCached = Boolean.valueOf(readOnly);
            }
        } catch (SQLException e) {
            _readOnlyCached = null;
            handleException(e);
        }
    }
-----CSCI578-----



    @Override
    public void setTransactionIsolation(int level) throws SQLException {
        checkOpen();
        try {
            _conn.setTransactionIsolation(level);
        } catch (SQLException e) {
            handleException(e);
        }
    }
-----CSCI578-----



    @Override
    public void setTypeMap(Map<String,Class<?>> map) throws SQLException {
        checkOpen();
        try {
            _conn.setTypeMap(map);
        } catch (SQLException e) {
            handleException(e);
        }
    }
-----CSCI578-----



    @Override
    public int getHoldability() throws SQLException {
        checkOpen();
        try {
            return _conn.getHoldability();
        } catch (SQLException e) {
            handleException(e);
            return 0;
        }
    }
-----CSCI578-----



    @Override
    public void setHoldability(int holdability) throws SQLException {
        checkOpen();
        try {
            _conn.setHoldability(holdability);
        } catch (SQLException e) {
            handleException(e);
        }
    }
-----CSCI578-----



    @Override
    public Savepoint setSavepoint() throws SQLException {
        checkOpen();
        try {
            return _conn.setSavepoint();
        } catch (SQLException e) {
            handleException(e);
            return null;
        }
    }



    @Override
    public Savepoint setSavepoint(String name) throws SQLException {
        checkOpen();
        try {
            return _conn.setSavepoint(name);
        } catch (SQLException e) {
            handleException(e);
            return null;
        }
    }
-----CSCI578-----



    @Override
    public void releaseSavepoint(Savepoint savepoint)
            throws SQLException {
        checkOpen();
        try {
            _conn.releaseSavepoint(savepoint);
        } catch (SQLException e) {
            handleException(e);
        }
    }
-----CSCI578-----


    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        checkOpen();
        try {
            return _conn.createArrayOf(typeName, elements);
        }
        catch (SQLException e) {
            handleException(e);
            return null;
        }
    }
-----CSCI578-----


    @Override
    public Blob createBlob() throws SQLException {
        checkOpen();
        try {
            return _conn.createBlob();
        }
        catch (SQLException e) {
            handleException(e);
            return null;
        }
    }
-----CSCI578-----


    @Override
    public Clob createClob() throws SQLException {
        checkOpen();
        try {
            return _conn.createClob();
        }
        catch (SQLException e) {
            handleException(e);
            return null;
        }
    }
-----CSCI578-----


    @Override
    public NClob createNClob() throws SQLException {
        checkOpen();
        try {
            return _conn.createNClob();
        }
        catch (SQLException e) {
            handleException(e);
            return null;
        }
    }
-----CSCI578-----


    @Override
    public SQLXML createSQLXML() throws SQLException {
        checkOpen();
        try {
            return _conn.createSQLXML();
        }
        catch (SQLException e) {
            handleException(e);
            return null;
        }
    }
-----CSCI578-----


    @Override
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        checkOpen();
        try {
            return _conn.createStruct(typeName, attributes);
        }
        catch (SQLException e) {
            handleException(e);
            return null;
        }
    }
-----CSCI578-----


    @Override
    public boolean isValid(int timeout) throws SQLException {
        if (isClosed()) {
            return false;
        }
        try {
            return _conn.isValid(timeout);
        }
        catch (SQLException e) {
            handleException(e);
            return false;
        }
    }
-----CSCI578-----


    @Override
    public Properties getClientInfo() throws SQLException {
        checkOpen();
        try {
            return _conn.getClientInfo();
        }
        catch (SQLException e) {
            handleException(e);
            return null;
        }
    }


    @Override
    public String getClientInfo(String name) throws SQLException {
        checkOpen();
        try {
            return _conn.getClientInfo(name);
        }
        catch (SQLException e) {
            handleException(e);
            return null;
        }
    }
-----CSCI578-----


    @Override
    public void setSchema(String schema) throws SQLException {
        checkOpen();
        try {
            _conn.setSchema(schema);
        }
        catch (SQLException e) {
            handleException(e);
        }
    }
-----CSCI578-----


    @Override
    public String getSchema() throws SQLException {
        checkOpen();
        try {
            return _conn.getSchema();
        }
        catch (SQLException e) {
            handleException(e);
            return null;
        }
    }
-----CSCI578-----


    @Override
    public void abort(Executor executor) throws SQLException {
        checkOpen();
        try {
            _conn.abort(executor);
        }
        catch (SQLException e) {
            handleException(e);
        }
    }
-----CSCI578-----


    @Override
    public void setNetworkTimeout(Executor executor, int milliseconds)
            throws SQLException {
        checkOpen();
        try {
            _conn.setNetworkTimeout(executor, milliseconds);
        }
        catch (SQLException e) {
            handleException(e);
        }
    }
-----CSCI578-----


    @Override
    public int getNetworkTimeout() throws SQLException {
        checkOpen();
        try {
            return _conn.getNetworkTimeout();
        }
        catch (SQLException e) {
            handleException(e);
            return 0;
        }
    }
-----CSCI578-----


    protected void handleException(SQLException e) throws SQLException {
        if (_conn != null) {
            _conn.handleException(e);
        }
        else {
            throw e;
        }
    }
-----CSCI578-----


    @Override
    public boolean allProceduresAreCallable() throws SQLException {
        try { return _meta.allProceduresAreCallable(); }
          catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean allTablesAreSelectable() throws SQLException {
        try { return _meta.allTablesAreSelectable(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean dataDefinitionCausesTransactionCommit() throws SQLException {
        try { return _meta.dataDefinitionCausesTransactionCommit(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean dataDefinitionIgnoredInTransactions() throws SQLException {
        try { return _meta.dataDefinitionIgnoredInTransactions(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean deletesAreDetected(int type) throws SQLException {
        try { return _meta.deletesAreDetected(type); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean doesMaxRowSizeIncludeBlobs() throws SQLException {
        try { return _meta.doesMaxRowSizeIncludeBlobs(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public String getCatalogSeparator() throws SQLException {
        try { return _meta.getCatalogSeparator(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public String getCatalogTerm() throws SQLException {
        try { return _meta.getCatalogTerm(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public int getDatabaseMajorVersion() throws SQLException {
        try { return _meta.getDatabaseMajorVersion(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getDatabaseMinorVersion() throws SQLException {
        try { return _meta.getDatabaseMinorVersion(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public String getDatabaseProductName() throws SQLException {
        try { return _meta.getDatabaseProductName(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public String getDatabaseProductVersion() throws SQLException {
        try { return _meta.getDatabaseProductVersion(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public int getDefaultTransactionIsolation() throws SQLException {
        try { return _meta.getDefaultTransactionIsolation(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public String getDriverName() throws SQLException {
        try { return _meta.getDriverName(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public String getDriverVersion() throws SQLException {
        try { return _meta.getDriverVersion(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public String getExtraNameCharacters() throws SQLException {
        try { return _meta.getExtraNameCharacters(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public String getIdentifierQuoteString() throws SQLException {
        try { return _meta.getIdentifierQuoteString(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public int getJDBCMajorVersion() throws SQLException {
        try { return _meta.getJDBCMajorVersion(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getJDBCMinorVersion() throws SQLException {
        try { return _meta.getJDBCMinorVersion(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxBinaryLiteralLength() throws SQLException {
        try { return _meta.getMaxBinaryLiteralLength(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxCatalogNameLength() throws SQLException {
        try { return _meta.getMaxCatalogNameLength(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxCharLiteralLength() throws SQLException {
        try { return _meta.getMaxCharLiteralLength(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxColumnNameLength() throws SQLException {
        try { return _meta.getMaxColumnNameLength(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxColumnsInGroupBy() throws SQLException {
        try { return _meta.getMaxColumnsInGroupBy(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxColumnsInIndex() throws SQLException {
        try { return _meta.getMaxColumnsInIndex(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxColumnsInOrderBy() throws SQLException {
        try { return _meta.getMaxColumnsInOrderBy(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxColumnsInSelect() throws SQLException {
        try { return _meta.getMaxColumnsInSelect(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxColumnsInTable() throws SQLException {
        try { return _meta.getMaxColumnsInTable(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxConnections() throws SQLException {
        try { return _meta.getMaxConnections(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxCursorNameLength() throws SQLException {
        try { return _meta.getMaxCursorNameLength(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxIndexLength() throws SQLException {
        try { return _meta.getMaxIndexLength(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxProcedureNameLength() throws SQLException {
        try { return _meta.getMaxProcedureNameLength(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxRowSize() throws SQLException {
        try { return _meta.getMaxRowSize(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxSchemaNameLength() throws SQLException {
        try { return _meta.getMaxSchemaNameLength(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxStatementLength() throws SQLException {
        try { return _meta.getMaxStatementLength(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxStatements() throws SQLException {
        try { return _meta.getMaxStatements(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxTableNameLength() throws SQLException {
        try { return _meta.getMaxTableNameLength(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxTablesInSelect() throws SQLException {
        try { return _meta.getMaxTablesInSelect(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public int getMaxUserNameLength() throws SQLException {
        try { return _meta.getMaxUserNameLength(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public String getNumericFunctions() throws SQLException {
        try { return _meta.getNumericFunctions(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public String getProcedureTerm() throws SQLException {
        try { return _meta.getProcedureTerm(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public int getResultSetHoldability() throws SQLException {
        try { return _meta.getResultSetHoldability(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public String getSQLKeywords() throws SQLException {
        try { return _meta.getSQLKeywords(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public int getSQLStateType() throws SQLException {
        try { return _meta.getSQLStateType(); }
        catch (SQLException e) { handleException(e); return 0; }
    }
-----CSCI578-----


    @Override
    public String getSchemaTerm() throws SQLException {
        try { return _meta.getSchemaTerm(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public String getSearchStringEscape() throws SQLException {
        try { return _meta.getSearchStringEscape(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public String getStringFunctions() throws SQLException {
        try { return _meta.getStringFunctions(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public String getSystemFunctions() throws SQLException {
        try { return _meta.getSystemFunctions(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public String getTimeDateFunctions() throws SQLException {
        try { return _meta.getTimeDateFunctions(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public String getURL() throws SQLException {
        try { return _meta.getURL(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public String getUserName() throws SQLException {
        try { return _meta.getUserName(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public boolean insertsAreDetected(int type) throws SQLException {
        try { return _meta.insertsAreDetected(type); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean isCatalogAtStart() throws SQLException {
        try { return _meta.isCatalogAtStart(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean isReadOnly() throws SQLException {
        try { return _meta.isReadOnly(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean locatorsUpdateCopy() throws SQLException {
        try { return _meta.locatorsUpdateCopy(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean nullPlusNonNullIsNull() throws SQLException {
        try { return _meta.nullPlusNonNullIsNull(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean nullsAreSortedAtEnd() throws SQLException {
        try { return _meta.nullsAreSortedAtEnd(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean nullsAreSortedAtStart() throws SQLException {
        try { return _meta.nullsAreSortedAtStart(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean nullsAreSortedHigh() throws SQLException {
        try { return _meta.nullsAreSortedHigh(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean nullsAreSortedLow() throws SQLException {
        try { return _meta.nullsAreSortedLow(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean othersDeletesAreVisible(int type) throws SQLException {
        try { return _meta.othersDeletesAreVisible(type); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean othersInsertsAreVisible(int type) throws SQLException {
        try { return _meta.othersInsertsAreVisible(type); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean othersUpdatesAreVisible(int type) throws SQLException {
        try { return _meta.othersUpdatesAreVisible(type); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean ownDeletesAreVisible(int type) throws SQLException {
        try { return _meta.ownDeletesAreVisible(type); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean ownInsertsAreVisible(int type) throws SQLException {
        try { return _meta.ownInsertsAreVisible(type); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean ownUpdatesAreVisible(int type) throws SQLException {
        try { return _meta.ownUpdatesAreVisible(type); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean storesLowerCaseIdentifiers() throws SQLException {
        try { return _meta.storesLowerCaseIdentifiers(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean storesLowerCaseQuotedIdentifiers() throws SQLException {
        try { return _meta.storesLowerCaseQuotedIdentifiers(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean storesMixedCaseIdentifiers() throws SQLException {
        try { return _meta.storesMixedCaseIdentifiers(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean storesMixedCaseQuotedIdentifiers() throws SQLException {
        try { return _meta.storesMixedCaseQuotedIdentifiers(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean storesUpperCaseIdentifiers() throws SQLException {
        try { return _meta.storesUpperCaseIdentifiers(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean storesUpperCaseQuotedIdentifiers() throws SQLException {
        try { return _meta.storesUpperCaseQuotedIdentifiers(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsANSI92EntryLevelSQL() throws SQLException {
        try { return _meta.supportsANSI92EntryLevelSQL(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsANSI92FullSQL() throws SQLException {
        try { return _meta.supportsANSI92FullSQL(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsANSI92IntermediateSQL() throws SQLException {
        try { return _meta.supportsANSI92IntermediateSQL(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsAlterTableWithAddColumn() throws SQLException {
        try { return _meta.supportsAlterTableWithAddColumn(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsAlterTableWithDropColumn() throws SQLException {
        try { return _meta.supportsAlterTableWithDropColumn(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsBatchUpdates() throws SQLException {
        try { return _meta.supportsBatchUpdates(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsCatalogsInDataManipulation() throws SQLException {
        try { return _meta.supportsCatalogsInDataManipulation(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsCatalogsInIndexDefinitions() throws SQLException {
        try { return _meta.supportsCatalogsInIndexDefinitions(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsCatalogsInPrivilegeDefinitions() throws SQLException {
        try { return _meta.supportsCatalogsInPrivilegeDefinitions(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsCatalogsInProcedureCalls() throws SQLException {
        try { return _meta.supportsCatalogsInProcedureCalls(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsCatalogsInTableDefinitions() throws SQLException {
        try { return _meta.supportsCatalogsInTableDefinitions(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsColumnAliasing() throws SQLException {
        try { return _meta.supportsColumnAliasing(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsConvert() throws SQLException {
        try { return _meta.supportsConvert(); }
        catch (SQLException e) { handleException(e); return false; }
    }


    @Override
    public boolean supportsConvert(int fromType, int toType)
            throws SQLException {
        try { return _meta.supportsConvert(fromType, toType); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsCoreSQLGrammar() throws SQLException {
        try { return _meta.supportsCoreSQLGrammar(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsCorrelatedSubqueries() throws SQLException {
        try { return _meta.supportsCorrelatedSubqueries(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsDataDefinitionAndDataManipulationTransactions()
            throws SQLException {
        try { return _meta.supportsDataDefinitionAndDataManipulationTransactions(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsDataManipulationTransactionsOnly()
            throws SQLException {
        try { return _meta.supportsDataManipulationTransactionsOnly(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsDifferentTableCorrelationNames() throws SQLException {
        try { return _meta.supportsDifferentTableCorrelationNames(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsExpressionsInOrderBy() throws SQLException {
        try { return _meta.supportsExpressionsInOrderBy(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsExtendedSQLGrammar() throws SQLException {
        try { return _meta.supportsExtendedSQLGrammar(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsFullOuterJoins() throws SQLException {
        try { return _meta.supportsFullOuterJoins(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsGetGeneratedKeys() throws SQLException {
        try { return _meta.supportsGetGeneratedKeys(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsGroupBy() throws SQLException {
        try { return _meta.supportsGroupBy(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsGroupByBeyondSelect() throws SQLException {
        try { return _meta.supportsGroupByBeyondSelect(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsGroupByUnrelated() throws SQLException {
        try { return _meta.supportsGroupByUnrelated(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsIntegrityEnhancementFacility() throws SQLException {
        try { return _meta.supportsIntegrityEnhancementFacility(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsLikeEscapeClause() throws SQLException {
        try { return _meta.supportsLikeEscapeClause(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsLimitedOuterJoins() throws SQLException {
        try { return _meta.supportsLimitedOuterJoins(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsMinimumSQLGrammar() throws SQLException {
        try { return _meta.supportsMinimumSQLGrammar(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsMixedCaseIdentifiers() throws SQLException {
        try { return _meta.supportsMixedCaseIdentifiers(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException {
        try { return _meta.supportsMixedCaseQuotedIdentifiers(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsMultipleOpenResults() throws SQLException {
        try { return _meta.supportsMultipleOpenResults(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsMultipleResultSets() throws SQLException {
        try { return _meta.supportsMultipleResultSets(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsMultipleTransactions() throws SQLException {
        try { return _meta.supportsMultipleTransactions(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsNamedParameters() throws SQLException {
        try { return _meta.supportsNamedParameters(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsNonNullableColumns() throws SQLException {
        try { return _meta.supportsNonNullableColumns(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsOpenCursorsAcrossCommit() throws SQLException {
        try { return _meta.supportsOpenCursorsAcrossCommit(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsOpenCursorsAcrossRollback() throws SQLException {
        try { return _meta.supportsOpenCursorsAcrossRollback(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsOpenStatementsAcrossCommit() throws SQLException {
        try { return _meta.supportsOpenStatementsAcrossCommit(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsOpenStatementsAcrossRollback() throws SQLException {
        try { return _meta.supportsOpenStatementsAcrossRollback(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsOrderByUnrelated() throws SQLException {
        try { return _meta.supportsOrderByUnrelated(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsOuterJoins() throws SQLException {
        try { return _meta.supportsOuterJoins(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsPositionedDelete() throws SQLException {
        try { return _meta.supportsPositionedDelete(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsPositionedUpdate() throws SQLException {
        try { return _meta.supportsPositionedUpdate(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsResultSetConcurrency(int type, int concurrency)
            throws SQLException {
        try { return _meta.supportsResultSetConcurrency(type, concurrency); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsResultSetHoldability(int holdability)
            throws SQLException {
        try { return _meta.supportsResultSetHoldability(holdability); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsResultSetType(int type) throws SQLException {
        try { return _meta.supportsResultSetType(type); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsSavepoints() throws SQLException {
        try { return _meta.supportsSavepoints(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsSchemasInDataManipulation() throws SQLException {
        try { return _meta.supportsSchemasInDataManipulation(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsSchemasInIndexDefinitions() throws SQLException {
        try { return _meta.supportsSchemasInIndexDefinitions(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsSchemasInPrivilegeDefinitions() throws SQLException {
        try { return _meta.supportsSchemasInPrivilegeDefinitions(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsSchemasInProcedureCalls() throws SQLException {
        try { return _meta.supportsSchemasInProcedureCalls(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsSchemasInTableDefinitions() throws SQLException {
        try { return _meta.supportsSchemasInTableDefinitions(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsSelectForUpdate() throws SQLException {
        try { return _meta.supportsSelectForUpdate(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsStatementPooling() throws SQLException {
        try { return _meta.supportsStatementPooling(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsStoredProcedures() throws SQLException {
        try { return _meta.supportsStoredProcedures(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsSubqueriesInComparisons() throws SQLException {
        try { return _meta.supportsSubqueriesInComparisons(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsSubqueriesInExists() throws SQLException {
        try { return _meta.supportsSubqueriesInExists(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsSubqueriesInIns() throws SQLException {
        try { return _meta.supportsSubqueriesInIns(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsSubqueriesInQuantifieds() throws SQLException {
        try { return _meta.supportsSubqueriesInQuantifieds(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsTableCorrelationNames() throws SQLException {
        try { return _meta.supportsTableCorrelationNames(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsTransactionIsolationLevel(int level)
            throws SQLException {
        try { return _meta.supportsTransactionIsolationLevel(level); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsTransactions() throws SQLException {
        try { return _meta.supportsTransactions(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsUnion() throws SQLException {
        try { return _meta.supportsUnion(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsUnionAll() throws SQLException {
        try { return _meta.supportsUnionAll(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean updatesAreDetected(int type) throws SQLException {
        try { return _meta.updatesAreDetected(type); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean usesLocalFilePerTable() throws SQLException {
        try { return _meta.usesLocalFilePerTable(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean usesLocalFiles() throws SQLException {
        try { return _meta.usesLocalFiles(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public RowIdLifetime getRowIdLifetime() throws SQLException {
        try { return _meta.getRowIdLifetime(); }
        catch (SQLException e) { handleException(e); throw new AssertionError(); }
    }
-----CSCI578-----


    @Override
    public boolean autoCommitFailureClosesAllResultSets() throws SQLException {
        try { return _meta.autoCommitFailureClosesAllResultSets(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean supportsStoredFunctionsUsingCallSyntax() throws SQLException {
        try { return _meta.supportsStoredFunctionsUsingCallSyntax(); }
        catch (SQLException e) { handleException(e); return false; }
    }
-----CSCI578-----


    @Override
    public boolean generatedKeyAlwaysReturned() throws SQLException {
        _conn.checkOpen();
        try {
            return _meta.generatedKeyAlwaysReturned();
        }
        catch (SQLException e) {
            handleException(e);
            return false;
        }
    }
