5
-----CSCI578-----


    PreparedStatement prepareStatement(String sql, int resultSetType,
            int resultSetConcurrency, int resultSetHoldability)
    throws SQLException {
        if (pstmtPool == null) {
            return connection.prepareStatement(sql, resultSetType,
                    resultSetConcurrency, resultSetHoldability);
        }
        try {
            return pstmtPool.borrowObject(createKey(sql, resultSetType,
                    resultSetConcurrency, resultSetHoldability));
        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            throw new SQLException("Borrow prepareStatement from pool failed", e);
        }
    }


    PreparedStatement prepareStatement(String sql, int columnIndexes[])
    throws SQLException {
        if (pstmtPool == null) {
            return connection.prepareStatement(sql, columnIndexes);
        }
        try {
            return pstmtPool.borrowObject(createKey(sql, columnIndexes));
        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            throw new SQLException("Borrow prepareStatement from pool failed", e);
        }
    }


    PreparedStatement prepareStatement(String sql, String columnNames[])
    throws SQLException {
        if (pstmtPool == null) {
            return connection.prepareStatement(sql, columnNames);
        }
        try {
            return pstmtPool.borrowObject(createKey(sql, columnNames));
        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            throw new SQLException("Borrow prepareStatement from pool failed", e);
        }
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----


    /**
     * Normalize the given SQL statement, producing a
     * canonical form that is semantically equivalent to the original.
     */
    protected String normalizeSQL(String sql) {
        return sql.trim();
    }
-----CSCI578-----
