14
-----CSCI578-----



    private void closeDueToException(PooledConnectionAndInfo info) {
        if (info != null) {
            try {
                info.getPooledConnection().getConnection().close();
            } catch (Exception e) {
                // do not throw this exception because we are in the middle
                // of handling another exception.  But record it because
                // it potentially leaks connections from the pool.
                getLogWriter().println("[ERROR] Could not return connection to "
                    + "pool during exception handling. " + e.getMessage());
            }
        }
    }
-----CSCI578-----


    /**
     * Sets the database password used when creating connections.
     *
     * @param password password used when authenticating to the database
     */
    void setPassword(String password);
-----CSCI578-----

    /**
     * Close the PooledConnection and remove it from the connection pool
     * to which it belongs, adjusting pool counters.
     *
     * @param pc PooledConnection to be invalidated
     * @throws SQLException if an SQL error occurs closing the connection
     */
    void invalidate(PooledConnection pc) throws SQLException;
-----CSCI578-----


    protected abstract PooledConnectionManager getConnectionManager(UserPassKey upkey);
-----CSCI578-----


    /**
     * Get the value of password.
     * @return value of password.
     */
    String getPassword() {
        return password;
    }
-----CSCI578-----


    protected ConnectionPoolDataSource
        testCPDS(String username, String password)
        throws javax.naming.NamingException, SQLException {
        // The source of physical db connections
        ConnectionPoolDataSource cpds = this.dataSource;
        if (cpds == null) {
            Context ctx = null;
            if (jndiEnvironment == null) {
                ctx = new InitialContext();
            } else {
                ctx = new InitialContext(jndiEnvironment);
            }
            Object ds = ctx.lookup(dataSourceName);
            if (ds instanceof ConnectionPoolDataSource) {
                cpds = (ConnectionPoolDataSource) ds;
            } else {
                throw new SQLException("Illegal configuration: "
                    + "DataSource " + dataSourceName
                    + " (" + ds.getClass().getName() + ")"
                    + " doesn't implement javax.sql.ConnectionPoolDataSource");
            }
        }

        // try to get a connection with the supplied username/password
        PooledConnection conn = null;
        try {
            if (username != null) {
                conn = cpds.getPooledConnection(username, password);
            }
            else {
                conn = cpds.getPooledConnection();
            }
            if (conn == null) {
                throw new SQLException(
                    "Cannot connect using the supplied username/password");
            }
        }
        finally {
            if (conn != null) {
                try {
                    conn.close();
                }
                catch (SQLException e) {
                    // at least we could connect
                }
            }
        }
        return cpds;
    }
-----CSCI578-----


    // ----------------------------------------------------------------------
    // Instrumentation Methods

    // ----------------------------------------------------------------------
    // DataSource implementation

    /**
     * Attempt to establish a database connection.
     * @return the connection
     * @throws SQLException Connection failed
     */
    @Override
    public Connection getConnection() throws SQLException {
        return getConnection(null, null);
    }
-----CSCI578-----


    /**
     * Get the value of logWriter.
     * @return value of logWriter.
     */
    @Override
    public PrintWriter getLogWriter() {
        if (logWriter == null) {
            logWriter = new PrintWriter(
                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8));
        }
        return logWriter;
    }
-----CSCI578-----


    protected abstract PooledConnectionAndInfo
        getPooledConnectionAndInfo(String username, String password)
        throws SQLException;
-----CSCI578-----


    protected abstract void setupDefaults(Connection con, String username)
        throws SQLException;
-----CSCI578-----


    PooledConnection getPooledConnection() {
        return pooledConnection;
    }
-----CSCI578-----


    UserPassKey getUserPassKey() {
        return upkey;
    }
-----CSCI578-----


    /**
     * Get the value of password.
     * @return value of password.
     */
    public String getPassword() {
        return password;
    }
-----CSCI578-----


    private void doDestroyObject(PooledConnectionAndInfo pci) throws Exception{
        PooledConnection pc = pci.getPooledConnection();
        pc.removeConnectionEventListener(this);
        pcMap.remove(pc);
        pc.close();
    }
