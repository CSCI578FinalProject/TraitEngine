31
-----CSCI578-----


    /**
     * <p>Sets the maximum permitted lifetime of a connection in
     * milliseconds. A value of zero or less indicates an infinite lifetime.</p>
     * <p>
     * Note: this method currently has no effect once the pool has been
     * initialized.  The pool is initialized the first time one of the
     * following methods is invoked: <code>getConnection, setLogwriter,
     * setLoginTimeout, getLoginTimeout, getLogWriter.</code></p>
     * @param maxConnLifetimeMillis The maximum connection lifetime
     */
    public void setMaxConnLifetimeMillis(long maxConnLifetimeMillis) {
        this.maxConnLifetimeMillis = maxConnLifetimeMillis;
    }
-----CSCI578-----
-----CSCI578-----


    private void setCommonProperties(Reference ref,
                                     InstanceKeyDataSource ikds)
        throws IOException, ClassNotFoundException {

        RefAddr ra = ref.get("dataSourceName");
        if (ra != null && ra.getContent() != null) {
            ikds.setDataSourceName(ra.getContent().toString());
        }

        ra = ref.get("description");
        if (ra != null && ra.getContent() != null) {
            ikds.setDescription(ra.getContent().toString());
        }

        ra = ref.get("jndiEnvironment");
        if (ra != null  && ra.getContent() != null) {
            byte[] serialized = (byte[]) ra.getContent();
            ikds.setJndiEnvironment((Properties) deserialize(serialized));
        }

        ra = ref.get("loginTimeout");
        if (ra != null && ra.getContent() != null) {
            ikds.setLoginTimeout(
                Integer.parseInt(ra.getContent().toString()));
        }

        // Pool properties
        ra = ref.get("blockWhenExhausted");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultBlockWhenExhausted(Boolean.valueOf(
                ra.getContent().toString()).booleanValue());
        }

        ra = ref.get("evictionPolicyClassName");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultEvictionPolicyClassName(ra.getContent().toString());
        }

        // Pool properties
        ra = ref.get("lifo");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultLifo(Boolean.valueOf(
                ra.getContent().toString()).booleanValue());
        }

        ra = ref.get("maxIdlePerKey");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultMaxIdle(
                Integer.parseInt(ra.getContent().toString()));
        }

        ra = ref.get("maxTotalPerKey");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultMaxTotal(
                Integer.parseInt(ra.getContent().toString()));
        }

        ra = ref.get("maxWaitMillis");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultMaxWaitMillis(
                Long.parseLong(ra.getContent().toString()));
        }

        ra = ref.get("minEvictableIdleTimeMillis");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultMinEvictableIdleTimeMillis(
                Long.parseLong(ra.getContent().toString()));
        }

        ra = ref.get("minIdlePerKey");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultMinIdle(
                Integer.parseInt(ra.getContent().toString()));
        }

        ra = ref.get("numTestsPerEvictionRun");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultNumTestsPerEvictionRun(
                Integer.parseInt(ra.getContent().toString()));
        }

        ra = ref.get("softMinEvictableIdleTimeMillis");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultSoftMinEvictableIdleTimeMillis(
                Long.parseLong(ra.getContent().toString()));
        }

        ra = ref.get("testOnCreate");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultTestOnCreate(Boolean.valueOf(
                ra.getContent().toString()).booleanValue());
        }

        ra = ref.get("testOnBorrow");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultTestOnBorrow(Boolean.valueOf(
                ra.getContent().toString()).booleanValue());
        }

        ra = ref.get("testOnReturn");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultTestOnReturn(Boolean.valueOf(
                ra.getContent().toString()).booleanValue());
        }

        ra = ref.get("testWhileIdle");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultTestWhileIdle(Boolean.valueOf(
                ra.getContent().toString()).booleanValue());
        }

        ra = ref.get("timeBetweenEvictionRunsMillis");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultTimeBetweenEvictionRunsMillis(
                Long.parseLong(ra.getContent().toString()));
        }


        // Connection factory properties

        ra = ref.get("validationQuery");
        if (ra != null && ra.getContent() != null) {
            ikds.setValidationQuery(ra.getContent().toString());
        }

        ra = ref.get("validationQueryTimeout");
        if (ra != null && ra.getContent() != null) {
            ikds.setValidationQueryTimeout(Integer.parseInt(
                    ra.getContent().toString()));
        }

        ra = ref.get("rollbackAfterValidation");
        if (ra != null && ra.getContent() != null) {
            ikds.setRollbackAfterValidation(Boolean.valueOf(
                ra.getContent().toString()).booleanValue());
        }

        ra = ref.get("maxConnLifetimeMillis");
        if (ra != null && ra.getContent() != null) {
            ikds.setMaxConnLifetimeMillis(
                Long.parseLong(ra.getContent().toString()));
        }


        // Connection properties

        ra = ref.get("defaultAutoCommit");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultAutoCommit(Boolean.valueOf(ra.getContent().toString()));
        }

        ra = ref.get("defaultTransactionIsolation");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultTransactionIsolation(
                Integer.parseInt(ra.getContent().toString()));
        }

        ra = ref.get("defaultReadOnly");
        if (ra != null && ra.getContent() != null) {
            ikds.setDefaultReadOnly(Boolean.valueOf(ra.getContent().toString()));
        }
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----


    /**
     * Set the value of loginTimeout.
     * @param v  Value to assign to loginTimeout.
     */
    @Override
    public void setLoginTimeout(int v) {
        this.loginTimeout = v;
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----


    /**
     * Set the description.  This property is defined by jdbc as for use with
     * GUI (or other) tools that might deploy the datasource.  It serves no
     * internal purpose.
     *
     * @param v  Value to assign to description.
     */
    public void setDescription(String v) {
        this.description = v;
    }
-----CSCI578-----


    /**
     * Set the value of defaultAutoCommit, which defines the state of
     * connections handed out from this pool.  The value can be changed
     * on the Connection using Connection.setAutoCommit(boolean).
     * The default is <code>null</code> which will use the default value for the
     * drive.
     *
     * @param v  Value to assign to defaultAutoCommit.
     */
    public void setDefaultAutoCommit(Boolean v) {
        assertInitializationAllowed();
        this.defaultAutoCommit = v;
    }
-----CSCI578-----


    /**
     * Set the name of the ConnectionPoolDataSource which backs this pool.
     * This name is used to look up the datasource from a jndi service
     * provider.
     *
     * @param v  Value to assign to dataSourceName.
     */
    public void setDataSourceName(String v) {
        assertInitializationAllowed();
        if (dataSource != null) {
            throw new IllegalStateException(
                "Cannot set the JNDI name for the DataSource, if already " +
                "set using setConnectionPoolDataSource.");
        }
        if (dataSourceName != null)
        {
            throw new IllegalStateException(
                "The DataSourceName has already been set. " +
                "It cannot be altered.");
        }
        this.dataSourceName = v;
        instanceKey = InstanceKeyDataSourceFactory.registerNewInstance(this);
    }
-----CSCI578-----


    /**
     * Used to set some properties saved within a Reference.
     * @param data Object data
     * @return the deserialized object
     * @throws IOException Stream error
     * @throws ClassNotFoundException Couldn't load object class
     */
    protected static final Object deserialize(byte[] data)
        throws IOException, ClassNotFoundException {
        ObjectInputStream in = null;
        try {
            in = new ObjectInputStream(new ByteArrayInputStream(data));
            return in.readObject();
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ex) {
                }
            }
        }
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----


    /**
     * Sets the value of the given JNDI environment property to be used when
     * instantiating a JNDI InitialContext. This InitialContext is used to
     * locate the backend ConnectionPoolDataSource.
     *
     * @param key the JNDI environment property to set.
     * @param value the value assigned to specified JNDI environment property.
     */
    public void setJndiEnvironment(String key, String value) {
        if (jndiEnvironment == null) {
            jndiEnvironment = new Properties();
        }
        jndiEnvironment.setProperty(key, value);
    }


    /**
     * Sets the JNDI environment to be used when instantiating a JNDI
     * InitialContext. This InitialContext is used to locate the backend
     * ConnectionPoolDataSource.
     *
     * @param properties the JNDI environment property to set which will
     *                   overwrite any current settings
     */
    void setJndiEnvironment(Properties properties) {
        if (jndiEnvironment == null) {
            jndiEnvironment = new Properties();
        } else {
            jndiEnvironment.clear();
        }
        jndiEnvironment.putAll(properties);
    }
-----CSCI578-----


    /**
     * Whether a rollback will be issued after executing the SQL query
     * that will be used to validate connections from this pool
     * before returning them to the caller. Default behavior is NOT
     * to issue a rollback. The setting will only have an effect
     * if a validation query is set
     *
     * @param rollbackAfterValidation new property value
     */
    public void setRollbackAfterValidation(boolean rollbackAfterValidation) {
        assertInitializationAllowed();
        this.rollbackAfterValidation = rollbackAfterValidation;
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----


    /**
     * Set the value of defaultReadOnly, which defines the state of
     * connections handed out from this pool.  The value can be changed
     * on the Connection using Connection.setReadOnly(boolean).
     * The default is <code>null</code> which will use the default value for the
     * drive.
     *
     * @param v  Value to assign to defaultReadOnly.
     */
    public void setDefaultReadOnly(Boolean v) {
        assertInitializationAllowed();
        this.defaultReadOnly = v;
    }
-----CSCI578-----
-----CSCI578-----


    /**
     * Set the value of defaultTransactionIsolation, which defines the state of
     * connections handed out from this pool.  The value can be changed
     * on the Connection using Connection.setTransactionIsolation(int).
     * The default is JDBC driver dependent.
     *
     * @param v  Value to assign to defaultTransactionIsolation
     */
    public void setDefaultTransactionIsolation(int v) {
        assertInitializationAllowed();
        switch (v) {
        case Connection.TRANSACTION_NONE:
        case Connection.TRANSACTION_READ_COMMITTED:
        case Connection.TRANSACTION_READ_UNCOMMITTED:
        case Connection.TRANSACTION_REPEATABLE_READ:
        case Connection.TRANSACTION_SERIALIZABLE:
            break;
        default:
            throw new IllegalArgumentException(BAD_TRANSACTION_ISOLATION);
        }
        this.defaultTransactionIsolation = v;
    }
-----CSCI578-----
-----CSCI578-----


    /**
     * Sets the timeout in seconds before the validation query fails.
     *
     * @param validationQueryTimeout    The new timeout in seconds
     */
    public void setValidationQueryTimeout(int validationQueryTimeout) {
        this.validationQueryTimeout = validationQueryTimeout;
    }
-----CSCI578-----


    /**
     * Throws an IllegalStateException, if a PooledConnection has already
     * been requested.
     */
    protected void assertInitializationAllowed()
        throws IllegalStateException {
        if (getConnectionCalled) {
            throw new IllegalStateException(GET_CONNECTION_CALLED);
        }
    }
-----CSCI578-----


    static synchronized String registerNewInstance(InstanceKeyDataSource ds) {
        int max = 0;
        Iterator<String> i = instanceMap.keySet().iterator();
        while (i.hasNext()) {
            String s = i.next();
            if (s != null) {
                try {
                    max = Math.max(max, Integer.parseInt(s));
                } catch (NumberFormatException e) {
                    // no sweat, ignore those keys
                }
            }
        }
        String instanceKey = String.valueOf(max + 1);
        // put a placeholder here for now, so other instances will not
        // take our key.  we will replace with a pool when ready.
        instanceMap.put(instanceKey, ds);
        return instanceKey;
    }
-----CSCI578-----


    /**
     * Set the backend ConnectionPoolDataSource.  This property should not be
     * set if using jndi to access the datasource.
     *
     * @param v  Value to assign to connectionPoolDataSource.
     */
    public void setConnectionPoolDataSource(ConnectionPoolDataSource v) {
        assertInitializationAllowed();
        if (dataSourceName != null) {
            throw new IllegalStateException(
                "Cannot set the DataSource, if JNDI is used.");
        }
        if (dataSource != null)
        {
            throw new IllegalStateException(
                "The CPDS has already been set. It cannot be altered.");
        }
        dataSource = v;
        instanceKey = InstanceKeyDataSourceFactory.registerNewInstance(this);
    }
