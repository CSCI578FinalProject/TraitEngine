5
-----CSCI578-----


    @Override
    public long getLastReturnTime() {
        return lastReturnTime;
    }
-----CSCI578-----


    @Override
    public int compareTo(PooledObject<T> other) {
        final long lastActiveDiff = this.getLastReturnTime() - other.getLastReturnTime();
        if (lastActiveDiff == 0) {
            // Make sure the natural ordering is broadly consistent with equals
            // although this will break down if distinct objects have the same
            // identity hash code.
            // see java.lang.Comparable Javadocs
            return System.identityHashCode(this) - System.identityHashCode(other);
        }
        // handle int overflow
        return (int)Math.min(Math.max(lastActiveDiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
    }
-----CSCI578-----


    /**
     * Obtain the time the wrapped object was last returned.
     *
     * @return The time the object was last returned
     */
    long getLastReturnTime();
-----CSCI578-----


    @Override
    public long getLastReturnTime() {
        return pooledObject.getLastReturnTime();
    }
-----CSCI578-----


    @Override
    public String getLastReturnTimeFormatted() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z");
        return sdf.format(Long.valueOf(pooledObject.getLastReturnTime()));
    }
