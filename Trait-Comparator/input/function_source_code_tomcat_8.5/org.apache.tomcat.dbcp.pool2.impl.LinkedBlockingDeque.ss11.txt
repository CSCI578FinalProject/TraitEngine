5
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----


    /**
     * Return an estimate of the number of threads currently blocked waiting for
     * an object from the pool. This is intended for monitoring only, not for
     * synchronization control.
     *
     * @return The estimate of the number of threads currently blocked waiting
     *         for an object from the pool
     */
    @Override
    public int getNumWaiters() {
        int result = 0;

        if (getBlockWhenExhausted()) {
            Iterator<ObjectDeque<T>> iter = poolMap.values().iterator();

            while (iter.hasNext()) {
                // Assume no overflow
                result += iter.next().getIdleObjects().getTakeQueueLength();
            }
        }

        return result;
    }
-----CSCI578-----


    /**
     * Return an estimate of the number of threads currently blocked waiting for
     * an object from the pool for each key. This is intended for
     * monitoring only, not for synchronization control.
     *
     * @return The estimate of the number of threads currently blocked waiting
     *         for an object from the pool for each key
     */
    @Override
    public Map<String,Integer> getNumWaitersByKey() {
        Map<String,Integer> result = new HashMap<>();

        for (K key : poolMap.keySet()) {
            ObjectDeque<T> queue = poolMap.get(key);
            if (queue != null) {
                if (getBlockWhenExhausted()) {
                    result.put(key.toString(), Integer.valueOf(
                            queue.getIdleObjects().getTakeQueueLength()));
                } else {
                    result.put(key.toString(), Integer.valueOf(0));
                }
            }
        }
        return result;
    }
-----CSCI578-----


    /**
     * Return an estimate of the number of threads currently blocked waiting for
     * an object from the pool. This is intended for monitoring only, not for
     * synchronization control.
     *
     * @return The estimate of the number of threads currently blocked waiting
     *         for an object from the pool
     */
    @Override
    public int getNumWaiters() {
        if (getBlockWhenExhausted()) {
            return idleObjects.getTakeQueueLength();
        }
        return 0;
    }
