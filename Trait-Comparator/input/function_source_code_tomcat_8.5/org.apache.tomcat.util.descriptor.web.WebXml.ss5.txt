55
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----

    public void setCookieDomain(String cookieDomain) {
        this.cookieDomain = cookieDomain;
    }
-----CSCI578-----

    public void setSessionTimeout(String sessionTimeout) {
        this.sessionTimeout = Integer.valueOf(sessionTimeout);
    }
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----

    public void setCookieHttpOnly(String cookieHttpOnly) {
        this.cookieHttpOnly = Boolean.valueOf(cookieHttpOnly);
    }
-----CSCI578-----

    public Map<String,String> getTaglibs() { return taglibs; }
-----CSCI578-----

    public void setCookieName(String cookieName) {
        this.cookieName = cookieName;
    }
-----CSCI578-----

    public void setCookieMaxAge(String cookieMaxAge) {
        this.cookieMaxAge = Integer.valueOf(cookieMaxAge);
    }
-----CSCI578-----

    public void addSecurityConstraint(SecurityConstraint securityConstraint) {
        securityConstraints.add(securityConstraint);
    }
-----CSCI578-----

    public void setCookieComment(String cookieComment) {
        this.cookieComment = cookieComment;
    }
-----CSCI578-----

    public void setCookiePath(String cookiePath) {
        this.cookiePath = cookiePath;
    }
-----CSCI578-----

    public void addWelcomeFile(String welcomeFile) {
        if (replaceWelcomeFiles) {
            welcomeFiles.clear();
            replaceWelcomeFiles = false;
        }
        welcomeFiles.add(welcomeFile);
    }
-----CSCI578-----



    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (!(obj instanceof LoginConfig))
            return false;
        LoginConfig other = (LoginConfig) obj;
        if (authMethod == null) {
            if (other.authMethod != null)
                return false;
        } else if (!authMethod.equals(other.authMethod))
            return false;
        if (errorPage == null) {
            if (other.errorPage != null)
                return false;
        } else if (!errorPage.equals(other.errorPage))
            return false;
        if (loginPage == null) {
            if (other.loginPage != null)
                return false;
        } else if (!loginPage.equals(other.loginPage))
            return false;
        if (realmName == null) {
            if (other.realmName != null)
                return false;
        } else if (!realmName.equals(other.realmName))
            return false;
        return true;
    }
-----CSCI578-----

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }
-----CSCI578-----

    public void setCookieSecure(String cookieSecure) {
        this.cookieSecure = Boolean.valueOf(cookieSecure);
    }
-----CSCI578-----

    public Map<String,MessageDestination> getMessageDestinations() {
        return messageDestinations;
    }
-----CSCI578-----

    public void addSecurityRole(String securityRole) {
        securityRoles.add(securityRole);
    }
-----CSCI578-----

    public void addJspPropertyGroup(JspPropertyGroup propertyGroup) {
        jspPropertyGroups.add(propertyGroup);
    }
-----CSCI578-----


    public void setFilterClass(String filterClass) {
        this.filterClass = filterClass;
    }
-----CSCI578-----



    // --------------------------------------------------------- Public Methods


    /**
     * Add an initialization parameter to the set of parameters associated
     * with this filter.
     *
     * @param name The initialization parameter name
     * @param value The initialization parameter value
     */
    public void addInitParameter(String name, String value) {

        if (parameters.containsKey(name)) {
            // The spec does not define this but the TCK expects the first
            // definition to take precedence
            return;
        }
        parameters.put(name, value);

    }
-----CSCI578-----


    public void setAsyncSupported(String asyncSupported) {
        this.asyncSupported = asyncSupported;
    }
-----CSCI578-----

    public Map<String,String> getContextParams() { return contextParams; }
-----CSCI578-----

    public boolean getDenyUncoveredHttpMethods() {
        return denyUncoveredHttpMethods;
    }
-----CSCI578-----

    public String getDisplayName() { return displayName; }
-----CSCI578-----

    public Map<String,ContextLocalEjb> getEjbLocalRefs() {
        return ejbLocalRefs;
    }
-----CSCI578-----

    public Map<String,ContextEjb> getEjbRefs() { return ejbRefs; }
-----CSCI578-----

    public Map<String,ContextEnvironment> getEnvEntries() { return envEntries; }
-----CSCI578-----

    public Map<String,ErrorPage> getErrorPages() { return errorPages; }
-----CSCI578-----

    public Map<String,FilterDef> getFilters() { return filters; }
-----CSCI578-----

    public Set<FilterMap> getFilterMappings() { return filterMaps; }
-----CSCI578-----

    public Set<String> getListeners() { return listeners; }
-----CSCI578-----

    public Map<String,String> getLocaleEncodingMappings() {
        return localeEncodingMappings;
    }
-----CSCI578-----

    public LoginConfig getLoginConfig() { return loginConfig; }
-----CSCI578-----

    public Map<String,MessageDestinationRef> getMessageDestinationRefs() {
        return messageDestinationRefs;
    }
-----CSCI578-----

    public Map<String,String> getMimeMappings() { return mimeMappings; }
-----CSCI578-----

    public Map<String,ContextResourceEnvRef> getResourceEnvRefs() {
        return resourceEnvRefs;
    }
-----CSCI578-----

    public Map<String,ContextResource> getResourceRefs() {
        return resourceRefs;
    }
-----CSCI578-----

    public Set<String> getSecurityRoles() { return securityRoles; }
-----CSCI578-----

    public Set<SecurityConstraint> getSecurityConstraints() {
        return securityConstraints;
    }
-----CSCI578-----

    public Map<String,ContextService> getServiceRefs() { return serviceRefs; }
-----CSCI578-----

    public Map<String,ServletDef> getServlets() { return servlets; }
-----CSCI578-----

    public Map<String,String> getServletMappings() { return servletMappings; }
-----CSCI578-----

    public SessionConfig getSessionConfig() { return sessionConfig; }
-----CSCI578-----

    public Set<String> getWelcomeFiles() { return welcomeFiles; }
-----CSCI578-----

    public Set<JspPropertyGroup> getJspPropertyGroups() {
        return jspPropertyGroups;
    }
-----CSCI578-----

    public Map<String, String> getPostConstructMethods() {
        return postConstructMethods;
    }
-----CSCI578-----

    public Map<String, String> getPreDestroyMethods() {
        return preDestroyMethods;
    }
-----CSCI578-----

    public URL getURL() { return uRL; }
-----CSCI578-----

    public void addListener(String className) {
        listeners.add(className);
    }
-----CSCI578-----

    public void addServletMapping(String urlPattern, String servletName) {
        String oldServletName = servletMappings.put(urlPattern, servletName);
        if (oldServletName != null) {
            // Duplicate mapping. As per clarification from the Servlet EG,
            // deployment should fail.
            throw new IllegalArgumentException(sm.getString(
                    "webXml.duplicateServletMapping", oldServletName,
                    servletName, urlPattern));
        }
        servletMappingNames.add(servletName);
    }
-----CSCI578-----

    public void addFilterMapping(FilterMap filterMap) {
        filterMaps.add(filterMap);
        filterMappingNames.add(filterMap.getFilterName());
    }
-----CSCI578-----


    @Override
    public void setAsyncSupported(boolean asyncSupported) {
        filterDef.setAsyncSupported(Boolean.valueOf(asyncSupported).toString());
    }
-----CSCI578-----


    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(32);
        buf.append("Name: ");
        buf.append(getName());
        buf.append(", URL: ");
        buf.append(getURL());
        return buf.toString();
    }
