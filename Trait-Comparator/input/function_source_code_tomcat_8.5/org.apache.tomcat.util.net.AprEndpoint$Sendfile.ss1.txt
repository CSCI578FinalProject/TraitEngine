9
-----CSCI578-----
-----CSCI578-----
-----CSCI578-----


    /**
     * Maintain on the descriptor(s) in a pollset
     * @param pollset The pollset to use
     * @param descriptors Array of signaled descriptors (output parameter)
     *        The descriptor array must be the size of pollset.
     *        and are populated as follows:
     * <PRE>
     * descriptors[n] -&gt; socket
     * </PRE>
     * @param remove Remove signaled descriptors from pollset
     * @return Number of signaled descriptors (output parameter)
     *         or negative APR error code.
     */
    public static native int maintain(long pollset, long [] descriptors,
                                      boolean remove);
-----CSCI578-----
-----CSCI578-----
 /** descriptor is the last one in the list */

    /**
     * Setup a pollset object.
     * If flags equals APR_POLLSET_THREADSAFE, then a pollset is
     * created on which it is safe to make concurrent calls to
     * apr_pollset_add(), apr_pollset_remove() and apr_pollset_poll() from
     * separate threads.  This feature is only supported on some
     * platforms; the apr_pollset_create() call will fail with
     * APR_ENOTIMPL on platforms where it is not supported.
     * @param size The maximum number of descriptors that this pollset can hold
     * @param p The pool from which to allocate the pollset
     * @param flags Optional flags to modify the operation of the pollset.
     * @param ttl Maximum time to live for a particular socket.
     * @return  The pointer in which to return the newly created object
     * @throws Error Pollset creation failed
     */
    public static native long create(int size, long p, int flags, long ttl)
        throws Error;


    /**
     * Add a socket to a pollset with the default timeout.
     * @param pollset The pollset to which to add the socket
     * @param sock The sockets to add
     * @param reqevents requested events
     * @return the operation status
     */
    public static native int add(long pollset, long sock,
                                 int reqevents);
-----CSCI578-----
 /** descriptor is the last one in the list */

    /**
     * Setup a pollset object.
     * If flags equals APR_POLLSET_THREADSAFE, then a pollset is
     * created on which it is safe to make concurrent calls to
     * apr_pollset_add(), apr_pollset_remove() and apr_pollset_poll() from
     * separate threads.  This feature is only supported on some
     * platforms; the apr_pollset_create() call will fail with
     * APR_ENOTIMPL on platforms where it is not supported.
     * @param size The maximum number of descriptors that this pollset can hold
     * @param p The pool from which to allocate the pollset
     * @param flags Optional flags to modify the operation of the pollset.
     * @param ttl Maximum time to live for a particular socket.
     * @return  The pointer in which to return the newly created object
     * @throws Error Pollset creation failed
     */
    public static native long create(int size, long p, int flags, long ttl)
        throws Error;


    /**
     * Remove a descriptor from a pollset
     * @param pollset The pollset from which to remove the descriptor
     * @param sock The socket to remove
     * @return the operation status
     */
    public static native int remove(long pollset, long sock);
-----CSCI578-----


    // -------------------------------------------------------------- Constants

    private static final Log log = LogFactory.getLog(AprEndpoint.class);


    @Override
    protected Log getLog() {
        return log;
    }
-----CSCI578-----
 /** descriptor is the last one in the list */

    /**
     * Setup a pollset object.
     * If flags equals APR_POLLSET_THREADSAFE, then a pollset is
     * created on which it is safe to make concurrent calls to
     * apr_pollset_add(), apr_pollset_remove() and apr_pollset_poll() from
     * separate threads.  This feature is only supported on some
     * platforms; the apr_pollset_create() call will fail with
     * APR_ENOTIMPL on platforms where it is not supported.
     * @param size The maximum number of descriptors that this pollset can hold
     * @param p The pool from which to allocate the pollset
     * @param flags Optional flags to modify the operation of the pollset.
     * @param ttl Maximum time to live for a particular socket.
     * @return  The pointer in which to return the newly created object
     * @throws Error Pollset creation failed
     */
    public static native long create(int size, long p, int flags, long ttl)
        throws Error;


    /**
     * Block for activity on the descriptor(s) in a pollset
     * @param pollset The pollset to use
     * @param timeout Timeout in microseconds
     * @param descriptors Array of signaled descriptors (output parameter)
     *        The descriptor array must be two times the size of pollset.
     *        and are populated as follows:
     * <PRE>
     * descriptors[2n + 0] -&gt; returned events
     * descriptors[2n + 1] -&gt; socket
     * </PRE>
     * @param remove Remove signaled descriptors from pollset
     * @return Number of signaled descriptors (output parameter)
     *         or negative APR error code.
     */
    public static native int poll(long pollset, long timeout,
                                  long [] descriptors, boolean remove);


    /**
     * Make poll() return.
     *
     * @param   pollset The pollset to use
     * @return  Negative APR error code
     */
    public static native int interrupt(long pollset);
-----CSCI578-----


    /**
     * Send a file without header and trailer arrays.
     * @param sock The socket to which we're writing
     * @param file The open file from which to read
     * @param offset Offset into the file where we should begin writing
     * @param len Number of bytes to send from the file
     * @param flags APR flags that are mapped to OS specific flags
     * @return Number of bytes actually sent
     */
    public static native long sendfilen(long sock, long file, long offset,
                                        long len, int flags);
