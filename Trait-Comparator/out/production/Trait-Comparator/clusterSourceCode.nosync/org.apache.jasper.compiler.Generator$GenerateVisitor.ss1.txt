230


    public Class<?> getBeanType(String bean)
        throws JasperException {
        Class<?> clazz = null;
        try {
            clazz = loader.loadClass(beanTypes.get(bean));
        } catch (ClassNotFoundException ex) {
            throw new JasperException (ex);
        }
        return clazz;
    }


    /**
     * Returns true if Jasper issues a compilation error instead of a runtime
     * Instantiation error if the class attribute specified in useBean action
     * is invalid.
     * @return <code>true</code> to get an error
     */
    public boolean getErrorOnUseBeanInvalidClassAttribute();


    /**
     * Gets the class-id value that is sent to Internet Explorer when using
     * &lt;jsp:plugin&gt; tags.
     * @return Class-id value
     */
    public String getIeClassId();


    /**
     * Indicates whether text strings are to be generated as char arrays.
     *
     * @return <code>true</code> if text strings are to be generated as char
     *         arrays, <code>false</code> otherwise
     */
    public boolean genStringAsCharArray();


    /**
     * Prints the current indention
     */
    public void printin() {
        writer.print(SPACES.substring(0, indent));
    }


    /**
     * Prints the current indention, followed by the given string
     * @param s The string
     */
    public void printin(String s) {
        writer.print(SPACES.substring(0, indent));
        writer.print(s);
    }


    /**
     * @param s
     *            the input string
     * @return quoted and escaped string, per Java rule
     */
    static String quote(String s) {

        if (s == null)
            return "null";

        return '"' + escape(s) + '"';
    }


    /**
     * Single quote and escape a character
     */
    static String quote(char c) {

        StringBuilder b = new StringBuilder();
        b.append('\'');
        if (c == '\'')
            b.append('\\').append('\'');
        else if (c == '\\')
            b.append('\\').append('\\');
        else if (c == '\n')
            b.append('\\').append('n');
        else if (c == '\r')
            b.append('\\').append('r');
        else
            b.append(c);
        b.append('\'');
        return b.toString();
    }


    /**
     * Prints the given char.
     *
     * Use println() to print a '\n'.
     * @param c The char
     */
    public void print(char c) {
        writer.print(c);
    }


    /**
     * Prints the given int.
     * @param i The int
     */
    public void print(int i) {
        writer.print(i);
    }


    /**
     * Prints the given string.
     *
     * The string must not contain any '\n', otherwise the line count will be
     * off.
     * @param s The string
     */
    public void print(String s) {
        writer.print(s);
    }


    /**
     * Prints the given string followed by '\n'
     * @param s The string
     */
    public void println(String s) {
        javaLine++;
        writer.println(s);
    }


    /**
     * Prints a '\n'
     */
    public void println() {
        javaLine++;
        writer.println("");
    }


    /**
     * Prints the given char.
     *
     * Use println() to print a '\n'.
     * @param c The char
     */
    public void print(char c) {
        writer.print(c);
    }



    // -------------------- Access informations --------------------

    public int getJavaLine() {
        return javaLine;
    }


    public Nodes getBody() {
        return body;
    }


    public void setBeginJavaLine(int begin) {
        beginJavaLine = begin;
    }


    public void setEndJavaLine(int end) {
        endJavaLine = end;
    }


    /**
     * @param s
     *            the input string
     * @return escaped string, per Java rule
     */
    static String escape(String s) {

        if (s == null)
            return "";

        StringBuilder b = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '"')
                b.append('\\').append('"');
            else if (c == '\\')
                b.append('\\').append('\\');
            else if (c == '\n')
                b.append('\\').append('n');
            else if (c == '\r')
                b.append('\\').append('r');
            else
                b.append(c);
        }
        return b.toString();
    }


    public String getQName() {
        return this.qName;
    }
