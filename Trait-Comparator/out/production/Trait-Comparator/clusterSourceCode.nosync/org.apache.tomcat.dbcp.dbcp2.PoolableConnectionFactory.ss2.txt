11


    private void validateLifetime(PooledObject<PoolableConnection> p)
            throws Exception {
        if (maxConnLifetimeMillis > 0) {
            long lifetime = System.currentTimeMillis() - p.getCreateTime();
            if (lifetime > maxConnLifetimeMillis) {
                throw new LifetimeExceededException(Utils.getMessage(
                        "connectionFactory.lifetimeExceeded",
                        Long.valueOf(lifetime),
                        Long.valueOf(maxConnLifetimeMillis)));
            }
        }
    }


    private void validateLifetime(PooledObject<PooledConnectionAndInfo> p)
            throws Exception {
        if (maxConnLifetimeMillis > 0) {
            long lifetime = System.currentTimeMillis() - p.getCreateTime();
            if (lifetime > maxConnLifetimeMillis) {
                throw new Exception(Utils.getMessage(
                        "connectionFactory.lifetimeExceeded",
                        Long.valueOf(lifetime),
                        Long.valueOf(maxConnLifetimeMillis)));
            }
        }
    }


    @Override
    public void passivateObject(PooledObject<PooledConnectionAndInfo> p)
            throws Exception {
        validateLifetime(p);
    }


    @Override
    public void activateObject(PooledObject<PooledConnectionAndInfo> p)
            throws Exception {
        validateLifetime(p);
    }


    private void validateLifetime(PooledObject<PooledConnectionAndInfo> p)
            throws Exception {
        if (maxConnLifetimeMillis > 0) {
            long lifetime = System.currentTimeMillis() - p.getCreateTime();
            if (lifetime > maxConnLifetimeMillis) {
                throw new Exception(Utils.getMessage(
                        "connectionFactory.lifetimeExceeded",
                        Long.valueOf(lifetime),
                        Long.valueOf(maxConnLifetimeMillis)));
            }
        }
    }


    @Override
    public void passivateObject(UserPassKey key,
            PooledObject<PooledConnectionAndInfo> p) throws Exception {
        validateLifetime(p);
    }


    @Override
    public void activateObject(UserPassKey key,
            PooledObject<PooledConnectionAndInfo> p) throws Exception {
        validateLifetime(p);
    }


    @Override
    public long getCreateTime() {
        return pooledObject.getCreateTime();
    }


    @Override
    public String getCreateTimeFormatted() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z");
        return sdf.format(Long.valueOf(pooledObject.getCreateTime()));
    }
