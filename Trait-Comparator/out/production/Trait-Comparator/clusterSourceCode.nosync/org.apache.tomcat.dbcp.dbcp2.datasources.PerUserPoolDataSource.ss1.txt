9


    /**
     * Create a pool key from the provided parameters.
     *
     * @param username  User name
     * @return the pool key
     */
    private PoolKey getPoolKey(String username) {
        return new PoolKey(getDataSourceName(), username);
    }



    // ----------------------------------------------------------------------
    // Instrumentation Methods

    /**
     * @return the number of active connections in the default pool.
     */
    public int getNumActive() {
        return getNumActive(null);
    }


    /**
     * @param username The user
     * @return the number of active connections in the pool for a given user.
     */
    public int getNumActive(String username) {
        ObjectPool<PooledConnectionAndInfo> pool =
            getPool(getPoolKey(username));
        return pool == null ? 0 : pool.getNumActive();
    }


    @Override
    protected PooledConnectionManager getConnectionManager(UserPassKey upkey) {
        return managers.get(getPoolKey(upkey.getUsername()));
    }


    /**
     * Get the value of username.
     * @return value of username.
     */
    public String getUsername() {
        return username;
    }


    /**
     * Return the number of instances currently borrowed from this pool. Returns
     * a negative value if this information is not available.
     * @return the number of instances currently borrowed from this pool.
     */
    int getNumActive();
