12


    private static void checkNotNull(Object value) {
        if (value == null) {
            throw new NullPointerException();
        }
    }


    @Override
    public V put(K key, V value) {
        checkNotNull(value);
        return map.put(createStoreKey(key), value);
    }


    @Override
    public V putIfAbsent(K key, V value) {
        checkNotNull(value);
        Key storeKey = createStoreKey(key);
        V oldValue = map.putIfAbsent(storeKey, value);
        if (oldValue != null) { // ack that key has not been stored
            storeKey.ackDeath();
        }
        return oldValue;
    }


    @Override
    public boolean replace(K key, V oldValue, V newValue) {
        checkNotNull(newValue);
        return map.replace(createLookupKey(key), oldValue, newValue);
    }


    @Override
    public V replace(K key, V value) {
        checkNotNull(value);
        return map.replace(createLookupKey(key), value);
    }


    /**
     * Creates Key instance to be used to store values in the map. It is
     * registered with the ReferenceQueue.
     */
    private Key createStoreKey(Object key) {
        return new Key(key, queue);
    }


    /**
     * Creates Key instance to be used only to lookup values in the map. It is
     * not registered with the ReferenceQueue.
     */
    private Key createLookupKey(Object key) {
        return new Key(key, null);
    }


    @Override
    public boolean containsKey(Object key) {
        if (key == null) {
            return false;
        }
        return map.containsKey(createLookupKey(key));
    }


    @Override
    public V get(Object key) {
        if (key == null) {
            return null;
        }
        return map.get(createLookupKey(key));
    }


    @Override
    public V remove(Object key) {
        return map.remove(createLookupKey(key));
    }


    @Override
    public boolean remove(Object key, Object value) {
        if (value == null) {
            return false;
        }
        return map.remove(createLookupKey(key), value);
    }
