6

    protected int getMaxThreadsExecutor(boolean useExecutor) {
        Executor executor = this.executor;
        if (useExecutor && executor != null) {
            if (executor instanceof java.util.concurrent.ThreadPoolExecutor) {
                return ((java.util.concurrent.ThreadPoolExecutor)executor).getMaximumPoolSize();
            } else if (executor instanceof ResizableExecutor) {
                return ((ResizableExecutor)executor).getMaxThreads();
            } else {
                return -1;
            }
        } else {
            return maxThreads;
        }
    }


    public int getMaxThreads();

    public int getMaxThreads() {
        return getMaxThreadsExecutor(running);
    }



    public int getMaxThreads() { return endpoint.getMaxThreads(); }

    public int getMinSpareThreads() {
        return Math.min(minSpareThreads,getMaxThreads());
    }



    public int getMinSpareThreads() { return endpoint.getMinSpareThreads(); }
