9

    public boolean getDaemon() { return daemon; }



    /**
     * Hook to allow Endpoints to provide a specific Acceptor implementation.
     * @return the acceptor
     */
    protected abstract Acceptor createAcceptor();


    protected final void startAcceptorThreads() {
        int count = getAcceptorThreadCount();
        acceptors = new Acceptor[count];

        for (int i = 0; i < count; i++) {
            acceptors[i] = createAcceptor();
            String threadName = getName() + "-Acceptor-" + i;
            acceptors[i].setThreadName(threadName);
            Thread t = new Thread(acceptors[i], threadName);
            t.setPriority(getAcceptorThreadPriority());
            t.setDaemon(getDaemon());
            t.start();
        }
    }

    public int getAcceptorThreadCount() { return acceptorThreadCount; }

    public int getAcceptorThreadPriority() { return acceptorThreadPriority; }

    public String getName() { return name; }

    public int getAcceptorThreadCount() {
      return endpoint.getAcceptorThreadCount();
    }

    public int getAcceptorThreadPriority() {
      return endpoint.getAcceptorThreadPriority();
    }
