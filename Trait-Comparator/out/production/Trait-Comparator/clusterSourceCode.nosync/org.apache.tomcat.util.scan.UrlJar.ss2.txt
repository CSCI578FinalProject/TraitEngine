11


    @Override
    public void reset() throws IOException {
        close();
        jarInputStream = createJarInputStream();
    }


    @Override
    public void close() {
        if (jarInputStream != null) {
            try {
                jarInputStream.reallyClose();
            } catch (IOException ioe) {
                // Ignore
            }
        }
    }


    public void reallyClose() throws IOException {
        super.close();
    }


    private NonClosingJarInputStream createJarInputStream() throws IOException {
        JarURLConnection jarConn = (JarURLConnection) url.openConnection();
        URL resourceURL = jarConn.getJarFileURL();
        URLConnection resourceConn = resourceURL.openConnection();
        resourceConn.setUseCaches(false);
        return new NonClosingJarInputStream(resourceConn.getInputStream());
    }



    private void closeInner() {
        if (jarInputStream != null) {
            try {
                jarInputStream.reallyClose();
            } catch (IOException ioe) {
                // Ignore
            }
        }
    }


    private NonClosingJarInputStream createJarInputStream() throws IOException {
        return new NonClosingJarInputStream(warFile.getInputStream(jarEntry));
    }



    @Override
    public void nextEntry() {
        if (jarInputStream == null) {
            try {
                jarInputStream = createJarInputStream();
            } catch (IOException e) {
                entry = null;
                return;
            }
        }
        try {
            entry = jarInputStream.getNextJarEntry();
        } catch (IOException ioe) {
            entry = null;
        }
    }



    @Override
    public InputStream getEntryInputStream() throws IOException {
        if (jarInputStream == null) {
            jarInputStream = createJarInputStream();
        }
        return jarInputStream;
    }



    @Override
    public void reset() throws IOException {
        closeInner();
        jarInputStream = createJarInputStream();
    }


    @Override
    public void close() {
        closeInner();
        if (warFile != null) {
            try {
                warFile.close();
            } catch (IOException e) {
                // Ignore
            }
        }
    }
